# -*- coding: utf-8 -*-

"""
Created on 23.03.2012
Refactored on 17.11.2022

@author: Semyon Potryasaev, Dmitriy Pavlov
"""

# TODO: –°—á–∏—Ç–∞–µ–º —Ä–∞–Ω–¥–æ–º–æ–º (SIMPLE_DECISION = True) –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å FIFO –ª—É—á—à–µ, —á–µ–º PULP, —Ç–æ
# –¥–µ–ª–∞–µ–º SIMPLE_DECISION = False –∏ —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.
# –ï—Å–ª–∏ –≤—Ä–µ–º—è –∫–æ–Ω—á–∏–ª–æ—Å—å, –∞ —Ä–∞—Å—á–µ—Ç—ã –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Ç–æ –≤—ã–¥–∞–µ–º FIFO —Å –ó–ê–ü–†–ï–¢–û–ú! (—Ç–∞–∫ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç)

# TODO: –ü–†–ò–ù–ò–ú–ê–¢–¨ –†–ï–®–ï–ù–ò–ï –ù–ï –ü–û –ì–û–õ–û–ú–£ –†–ê–ù–î–û–ú–£, –ê –ü–û –ù–ê–ü–†–ê–í–õ–ï–ù–ù–û–ú–£ –ü–û–ò–°–ö–£

# !!!TODO: –í –ò–¢–û–ì–ï: –û–°–¢–ê–í–ò–¢–¨ –í–°–ï –ö–ê–ö –ï–°–¢–¨, –ù–û –ò–ó–ú–ï–ù–ò–¢–¨ –†–ê–ù–î–û–ú –ù–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ù–´–ô –†–ê–ù–î–û–ú –ò –î–û–ë–ê–í–ò–¢–¨ –û–¢–°–ï–ß–ö–£ –ü–û –í–†–ï–ú–ï–ù–ò –†–ê–°–ß–ï–¢–û–í
    # –ü–†–û–î–ê–ö–®–ù: SIMPLE_DESICION (–û–¢–°–ï–ß–ö–ê + –ö–†–£–¢–û–ô –†–ê–ù–î–û–ú)
    # –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø: –ù–ï SIMPLE_DESICION
    # –í–´–¢–ê–©–ò–¢–¨ –ü–†–ò–û–†–ò–¢–ï–¢ –û–ü–ï–†–ê–¶–ò–ò –ò–ó PRIORITY –ò –Æ–ó–ê–¢–¨ –í –ö–ê–ß–ï–°–¢–í–ï –í–ï–°–ê
    # –ü–ï–†–í–ê–Ø –†–ê–ù–î–û–ú–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø - –ñ–ê–î–ù–ê–Ø. –ê –ü–û–¢–û–ú –†–ê–ù–î–û–ú–ò–¢–¨ –° –í–ï–°–ê–ú–ò. –ï–°–õ–ò –ë–£–î–ï–¢ –õ–£–ß–®–ï, –¢–û –û–ö
    # –í–ï–°–ê - –ò–ó –°–û–í–û–ö–£–ü–ù–û–ì–û –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø

import os
import sys
import operator
from math import log10, ceil, inf
from random import randrange
from time import time
from datetime import timedelta, datetime
from itertools import groupby
from uuid import uuid1
from copy import deepcopy
from functools import reduce
import yaml
import inspect
import csv
import json

import networkx as nx
from lxml import etree  # http://www.lfd.uci.edu/~gohlke/pythonlibs/
import pulp
from pulp import LpProblem, LpMaximize, LpVariable, LpInteger, LpContinuous, lpDot, LpStatus, value
import click                # CLI
#from constants import *     # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

insp = {}
i = 0

# –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ csv –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π

import os
import shutil


QltTemplate = {
            "J0": [1],
            "J1": [0],
            "J2": [0.5],
            "J3": [0],
            "J4": [0],
            "J5": [0],
            "J6": [0],
            "J7": [0.5],
            "J8": [0],
            "J9": [0]
        }

dir_name_ID = 'zakharov_ID'
template_file = os.path.join(dir_name_ID, 'Qlt.json')
if not os.path.exists(dir_name_ID):
    os.makedirs(dir_name_ID)
    with open(template_file, 'w') as f:
        json.dump(QltTemplate, f)


# –ø–∞–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
dir_name = 'zakharov_RESULT'
if os.path.exists(dir_name):
    shutil.rmtree(dir_name)
os.makedirs(dir_name)

index_ham = 0
ham_file = open(os.path.join(dir_name, 'hamiltonian_1.csv'), 'w')
csv_data = [['time', 'Job','Res','C', 'solution']]
time_pred = 1


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
DEBUG = False
DEBUG_L1 = False
DEBUG_L2 = False
DEBUG_Q = False
DEBUG_FRONT = False
DEBUG_PULP = False
DEBUG_INTERRUPT = False
DEBUG_EXEC = False
DEBUG_NORMALIZE = False
DEBUG_GRAPH = False
DEBUG_TRANS = False
DEBUG_REV = False
PRINT = False
DEBUG_CTRL = False

WRITE_FILE = False

SIMPLE_DECISION = True

NORMALIZE_LOG_OP = False
NORMALIZE_LOG_ST = False
NORMALIZE_LOG_ANGLE = True

FILE_RESULT_GANT = False
FILE_RESULT_LIST = False
FILE_RESULT_CHART = False

HAMILTONIAN_THINNING: 2

# –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º –ì–∞–Ω—Ç–∞
PLOT_GANT = True


# DEPRECATED —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
NOT_COMPLETED = 0  # –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
TIME_COMPLETED = 1  # –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –ø–æ—Ç–æ–∫ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
STREAM_COMPLETED = 2  # –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤—Ä–µ–º—è –µ—â—ë –æ—Å—Ç–∞–ª–æ—Å—å
FULL_COMPLETED = 3  # –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞

# —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
OP_WAIT = 0  # –∂–¥—ë—Ç –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
OP_EXEC = 1  # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
OP_FLOW_COMPLETED = 2  # –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
OP_COMPLETED = 3  # –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å—á–µ—Ä–ø–∞–Ω–æ
OP_TIMEOUT = -1  # –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
OP_STRANGE = -2  # —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞

# —Ñ–ª–∞–≥ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å
RES_PROCESSING = -1  # –æ–ø–µ—Ä–∞—Ü–∏—è [–º–æ–∂–µ—Ç –±—ã—Ç—å] –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
RES_REJECTED = -2  # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–º
# –æ–ø–µ—Ä–∞—Ü–∏—è [–º–æ–∂–µ—Ç –±—ã—Ç—å] –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–µ—Å—É—Ä—Å
RES_TO_FULL = -3



class GrandSolver(object):
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–ª–∞–Ω–∞. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–µ–ª–∏."""

    def __init__(self, sname):
        # pydevd.settrace('macmini')

        self.p = None  # Communication Pipe –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        self.logger = None  # Communication Pipe –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        self.Name = sname  # –∏–º—è –º–æ–¥–µ–ª–∏
        self.D = 1  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.Step = 1  # —à–∞–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ (–≤—Ä–µ–º–µ–Ω–Ω–û–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ) –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        # –†–µ–∞–ª—å–Ω–æ –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π —à–∞–≥, –µ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –±—ã—Å—Ç—Ä—ã–º —Ä–∞—Å—á—ë—Ç–∞–º
        # –∑–∞ —Å—á—ë—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—à–∏–±–∫–∏, —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à–∞–≥–∞ –Ω–∏–∂–µ –∑–Ω–∞—á–µ–Ω–∏—è Step –ø—Ä–∏–≤–µ–¥—ë—Ç
        # –∫ –±–æ–ª—å—à–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—á—ë—Ç–∞ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        # TODO	–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —à–∞–≥–∞, –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–º—É
        self.time = 0  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–æ–¥–µ–ª–∏
        self.conflict_count = 0  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π

        # –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–≤–æ–∑–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
        self.ProcList = {}  # –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Ö—Ä–∞–Ω—è—â–∏—Ö —Å–ª–æ–≤–∞—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.ClustList = {}  # –°–ª–æ–≤–∞—Ä—å –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, —Ö—Ä–∞–Ω—è—â–∏—Ö —Å–ª–æ–≤–∞—Ä–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.Precision = 0.01  # –¢–æ—á–Ω–æ—Å—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö
        self.StructMatrix = {}  # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞, –∑–∞–¥–∞—ë—Ç Theta ikj: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ

        # self.availability - –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: [op_id] = [(startTime, 0/1), ...]
        # - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ op_id –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç startTime –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        self.availability = {}

        # self.penalty - –ú–∞—Ç—Ä–∏—Ü–∞ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π: [op_id] = [(startTime, penalty)]
        # - —à—Ç—Ä–∞—Ñ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ op_id —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ startTime –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º. –°—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        self.penalty = {}


        # self.res_availability - –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞: [res_id] = [(startTime, 0/1), ...]
        # - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞ res_id –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç startTime –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        self.res_availability = {}

        # –ú–∞—Ç—Ä–∏—Ü–∞ –∑–∞–ø—Ä–µ—Ç–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: [op_id] = [(startTime, 0/1), ...]
        # - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ op_id –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç startTime –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        self.restriction = {}

        # –°–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∏ {"J#": [–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, ...–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, ...]).
        # J0 - –æ–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
        # J1 - –Ω–µ–≤—è–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        # J2 - –Ω–µ–≤—è–∑–∫–∞ –ø–æ –ø–æ—Ç–æ–∫—É
        # J3 - –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (ùúÇ-—Ñ—É–Ω–∫—Ü–∏—è)
        # J4 - —à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ (q-—Ñ—É–Ω–∫—Ü–∏—è)
        # J5 - –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        # J6 - —Ä–∞–∑—Ä—ã–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
        # J7 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        # J8 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        # J9 - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–æ–±–∞—Å—Ç–Ω–æ—Å—Ç–∏
        self.QltList = {
            "J0": [1],
            "J1": [0],
            "J2": [0.5],
            "J3": [0],
            "J4": [0],
            "J5": [0],
            "J6": [0],
            "J7": [0.5],
            "J8": [0],
            "J9": [0]
        }
        if os.path.exists(template_file):
            with open(template_file) as file:
                self.QltList = json.load(file)

        # –ß–∏—Å–ª–æ –∫–ª–æ–Ω–æ–≤ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        self.Threads = None

        # –£—Å–ª–æ–≤–∏—è —Ç—Ä–∞–Ω—Å–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
        self.operation_conditions = dict()
        self.stream_conditions = dict()
        self.resource_conditions = dict()


        # –ù–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ–ø—Ä—è–∂—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.operation_init_conditions = dict()
        self.stream_init_conditions = dict()
        self.resource_init_conditions = dict()

        self.OpPriorMatrix = {}  # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π [–æ–ø–µ—Ä–∞—Ü–∏—è] = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        self.ResPriorMatrix = {}  # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ [—Ä–µ—Å—É—Ä—Å] = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        self.StreamPriorMatrix = {}  # –°–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π [–æ–ø–µ—Ä–∞—Ü–∏—è] = –ø–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

        # –°–ø–∏—Å–æ–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–µ—Å—É—Ä—Å–∞–º–∏ [(–æ–ø–µ—Ä–∞—Ü–∏—è, —Ä–µ—Å—É—Ä—Å)] = (startTime, intens)
        #  - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞ Res –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ op –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç startTime –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        self.ProductivityMatrix = {}

        # —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
        # [{(–≤—Ä–µ–º—è, –æ–ø–µ—Ä–∞—Ü–∏—è)}] = (—Ä–µ—Å—É—Ä—Å, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å) - –ª–∏—Å—Ç —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏-–∫–æ—Ä—Ç–µ–∂–∞–º–∏
        self.timetable = []

        # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {(–ø—Ä–æ—Ü–µ—Å—Å, –æ–ø–µ—Ä–∞—Ü–∏—è)} = [{'start', 'stop', 'res', 'intens'}]
        self.Schedule = {}

        self.debug_vars = {}

        #DOPS (PDA)
        self.Priorities_all = {}

    def read_xml(self, model_filename=None, model_str=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Ñ–∞–π–ª—É XML.
        –ê—Ä–≥—É–º–µ–Ω—Ç:
        :param model_filename: –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏.
        """

        dyn = GrandSolver(os.path.split(model_filename)[-1] if model_filename else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π xml")
        
        if model_filename:
            tree = etree.parse(model_filename)
            root = tree.getroot()
        elif model_str:
            root = etree.fromstring(model_str)
        else:
            raise Exception('No file-xml or xml-str model')

        dyn.D = float(root.find("duration").text)
        # dyn.Name = root.find("name").text
        th = root.find("threads")
        try:
            dyn.Threads = int(th.text)
        except:
            dyn.Threads = None

        # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á–∞—Å—Ç–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Å–∫–∞–ª—è—Ä–Ω–æ–π —Å–≤—ë—Ä—Ç–∫–µ
        coefs = root.find("coefficients")
        dyn.QltList["J0"][0] = 1  # "–ù–µ–ø–æ–ª–Ω–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"
        dyn.QltList["J1"][0] = float(coefs.find(
            "integrity").text.replace(",", "."))
        dyn.QltList["J2"][0] = float(coefs.find("flow").text.replace(
            ',', '.'))  # "–ù–µ–ø–æ–ª–Ω–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞"
        dyn.QltList["J3"][0] = float(coefs.find("cost").text.replace(
            ',', '.'))  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
        dyn.QltList["J4"][0] = float(coefs.find(
            "fine").text.replace(',', '.'))  # "–î–∏—Ä–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ä–æ–∫–∏"
        dyn.QltList["J5"][0] = float(coefs.find("uniform").text.replace(
            ',', '.'))  # "–ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"
        dyn.QltList["J6"][0] = float(coefs.find(
            "interrupt").text.replace(',', '.'))  # –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ—Å—Ç—å
        dyn.QltList["J7"][0] = float(coefs.find("time").text.replace(',', '.'))
        dyn.QltList["J8"][0] = 0
        dyn.QltList["J9"][0] = 0

        # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for procelement in root.iter("process"):
            tempproc = dyn.AddProc(procelement.findtext(
                "name"), procelement.findtext("id"))
            # if dyn.p: dyn.p.send("INF: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ " + str(tempproc.ID))

            # # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–ï–º–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            # process_availability = []
            #
            # avail_element = procelement.find("availability")
            # if avail_element is not None:
            #     for val in avail_element.iter("value"):
            #         process_availability.append((float(val.attrib["time"]), int(val.text)))

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å
            # previousop = None
            for opelement in procelement.iterfind("operation"):
                new_operation = tempproc.add_operation(opelement.findtext("name"),
                                                    float(opelement.findtext(
                                                        "volume").replace(',', '.')),
                                                    opelement.findtext(
                                                        "stream"),
                                                    opelement.findtext("id"),
                                                    opelement.findtext("id"),
                                                    # opelement.findtext("template_id"),
                                                    opelement.findtext("x"),
                                                    opelement.findtext("y"))

                # –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—é
                # dyn.availability[new_operation.ID] = list(process_availability)
                # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–ï–º–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
                op_availability = []

                avail_element = opelement.find("availability")
                if avail_element is not None:
                    for val in avail_element.iter("value"):
                        op_availability.append(
                            (float(val.attrib["time"]), int(val.text)))
                    op_availability.insert(0, (0, 0))
                dyn.availability[new_operation.ID] = op_availability[:]

                # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
                op_penalty = ()

                penalty_element = opelement.find("penalty")
                if penalty_element is not None:
                    op_penalty = ((float(penalty_element.findtext("start").replace(',', '.')),
                                float(penalty_element.findtext("angle").replace(',', '.')), 0))
                    dyn.penalty[new_operation.ID] = op_penalty

            # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
            graph_element = procelement.find("graph")
            if graph_element is not None:
                for edge in procelement.find("graph").iter("edge"):
                    tempproc.add_link(edge.attrib["from"], edge.attrib["to"],
                                    edge.findtext("fwd") if edge.find(
                                        "fwd") is not None else 1,
                                    edge.findtext("rev") if edge.find("rev") is not None else 1)

        # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        # if dyn.p: dyn.p.send("INF: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
        for clustelement in root.iterfind("cluster"):
            tempclust = dyn.AddClust(clustelement.findtext("name"))
            for reselement in clustelement.iter("resource"):
                tempres = tempclust.AddRes(reselement.find("name").text,
                                        float(reselement.findtext(
                                            "power").replace(',', '.')),
                                        reselement.findtext(
                                            "capacity"), reselement.findtext("price"),
                                        reselement.findtext("id"),
                                        reselement.findtext("template_id"))
                avail_element = reselement.find("availability")
                res_availability = []
                if avail_element is not None:
                    for val in avail_element.iter("value"):
                        res_availability.append(
                            (float(val.attrib["time"]), int(val.text)))

                dyn.res_availability[tempres.ID] = list(res_availability)

        # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π

        for resprod in root.find("productivity").iter("resource"):
            for opprod in resprod.iter("job"):
                dyn.ProductivityMatrix[(opprod.attrib["ID"], resprod.attrib["ID"])] = float(
                    opprod.findtext("value"))

        #PAVLOV: + number of threads from XML (max of jobs list)
        dyn.Threads = dyn.Threads or len(dyn.ProductivityMatrix)
        
        return dyn

    def read_bpmn(self, bpmn_file):
        if not os.path.isfile(bpmn_file):
            exit(1)

        dyn = GrandSolver(os.path.split(bpmn_file)[-1])

        if DEBUG:
            print("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —Ñ–∞–π–ª—É BPMN")

        tree = etree.parse(bpmn_file)
        root = tree.getroot()

        # get its namespace map, excluding default namespace
        #"mdl": "http://www.omg.org/spec/BPMN/20100524/MODEL",
        '''nsmap = {
            'xmlns':"http://www.omg.org/spec/BPMN/20100524/MODEL", 
            "ltsm": "http://litsam.ru", 
            "bpmndi": "http://www.omg.org/spec/BPMN/20100524/DI", 
            "dc": "http://www.omg.org/spec/DD/20100524/DC"
        }'''
        nsmap = {
            'xmlns': "http://www.omg.org/spec/BPMN/20100524/MODEL",
            'ltsm': "https://litsam.ru",
            'ltsm:props': "https://litsam.ru",
            'bpmndi': "http://www.omg.org/spec/BPMN/20100524/DI",
            'omgdc' : "http://www.omg.org/spec/DD/20100524/DC",
            'omgdi': "http://www.omg.org/spec/DD/20100524/DI",
            "dc": "http://www.omg.org/spec/DD/20100524/DC"
        }

        # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤

        if DEBUG:
            print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")

        clstr = dyn.AddClust("–ü—É–ª —Ä–µ—Å—É—Ä—Å–æ–≤")
        for reselement in root.iterfind("xmlns:resource", nsmap):
            res_threads = reselement.xpath("xmlns:extensionElements/ltsm:props[@name='threads']/@value", namespaces=nsmap) or [None]
            res_price = reselement.xpath("xmlns:extensionElements/ltsm:props[@name='price']/@value", namespaces=nsmap) or [None]
            res_productivity = reselement.xpath("xmlns:extensionElements/ltsm:props[@name='productivity']/@value", namespaces=nsmap) or [None]
            tempres = clstr.AddRes(reselement.attrib.get("name"), res_productivity[0], res_threads[0], res_price[0], reselement.attrib.get("id"), uuid1())
            if DEBUG:
                print("\t" + tempres.Name)

            ##!~ Palich
            res_availability = []
            res_avail_element_times = reselement.xpath("xmlns:extensionElements/ltsm:availability/@availability_time", namespaces=nsmap) or None
            res_avail_element_times = res_avail_element_times or reselement.xpath("xmlns:extensionElements/ltsm:availability[@name='availability_time']/@value", namespaces=nsmap)
            res_avail_element_times = res_avail_element_times or None
            res_avail_element_values = reselement.xpath("xmlns:extensionElements/ltsm:availability/@availability_value", namespaces=nsmap) or None
            res_avail_element_values = res_avail_element_values or reselement.xpath("xmlns:extensionElements/ltsm:availability[@name='availability_value']/@value", namespaces=nsmap)
            res_avail_element_values = res_avail_element_values or None
            #print(res_avail_element_times)
            #print(res_avail_element_values)

            if res_avail_element_times is not None and res_avail_element_values is not None:
                for time_val in zip(res_avail_element_times, res_avail_element_values):
                    #print(time_val)
                    res_availability.append(
                        (float(time_val[0]), int(time_val[1])))
                res_availability.insert(0, (0, 0))
            dyn.res_availability[tempres.ID] = res_availability[:]
            #print(dyn.res_availability)
            ##!~ /Palich
            # if self.p: self.p.send("INF: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ " + str(tempproc.ID))
        # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        #exit()
        print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

        # –û–°–¢–ê–õ–û–°–¨ –≤ bpmn_reader.py
        # global temp_coords
        # temp_coords.clear()
        
        for procelement in root.iterfind("xmlns:process", nsmap):
            tempproc = dyn.AddProc(procelement.attrib.get("id"))
            print("\t" + tempproc.Name)
            # if self.p: self.p.send("INF: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ " + str(tempproc.ID))

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å

            print("\t–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π")

            for opelement in procelement.iterfind("xmlns:task", nsmap):
                #templ = opelement.find("xmlns:extensionElements", nsmap)
                #ttt = templ.find("ltsm:props", nsmap)
                #ttt = templ.getchildren()
                # templ_uuid = templ.find("ctss:template_id", nsmap)
                templ_uuid = None

                # –û–±–∞ —Å–ø–æ—Å–æ–±–∞ —á—Ç–µ–Ω–∏—è (added by Palich)
                op_volume = opelement.xpath("xmlns:extensionElements/ltsm:props/@volume", namespaces=nsmap) or None
                op_volume = op_volume or opelement.xpath("xmlns:extensionElements/ltsm:props[@name='volume']/@value", namespaces=nsmap)
                op_volume = op_volume or ["0"]
                op_stream = opelement.xpath("xmlns:extensionElements/ltsm:props/@stream", namespaces=nsmap) or None
                op_stream = op_stream or opelement.xpath("xmlns:extensionElements/ltsm:props[@name='stream']/@value", namespaces=nsmap)
                op_stream = op_stream or ["0"]
                op_penalty_start = opelement.xpath("xmlns:extensionElements/ltsm:props/@penalty_start", namespaces=nsmap) or None
                op_penalty_start = op_penalty_start or opelement.xpath("xmlns:extensionElements/ltsm:props[@name='penalty_start']/@value", namespaces=nsmap)
                op_penalty_start = op_penalty_start or ["0"]
                op_penalty_angle = opelement.xpath("xmlns:extensionElements/ltsm:props/@penalty_angle", namespaces=nsmap) or None
                op_penalty_angle = op_penalty_angle or opelement.xpath("xmlns:extensionElements/ltsm:props[@name='penalty_angle']/@value", namespaces=nsmap)
                op_penalty_angle = op_penalty_angle or ["0"]

                ##!~ Palich
                op_availability = []
                avail_element_times = opelement.xpath("xmlns:extensionElements/ltsm:availability/@availability_time", namespaces=nsmap) or None
                avail_element_times = avail_element_times or opelement.xpath("xmlns:extensionElements/ltsm:availability[@name='availability_time']/@value", namespaces=nsmap)
                avail_element_times = avail_element_times or None
                avail_element_values = opelement.xpath("xmlns:extensionElements/ltsm:availability/@availability_value", namespaces=nsmap) or None
                avail_element_values = avail_element_values or opelement.xpath("xmlns:extensionElements/ltsm:availability[@name='availability_value']/@value", namespaces=nsmap)
                avail_element_values = avail_element_values or None
                #print(avail_element_times)
                #print(avail_element_values)

                if avail_element_times is not None and avail_element_values is not None:
                    for time_val in zip(avail_element_times, avail_element_values):
                        #print(time_val)
                        op_availability.append(
                            (float(time_val[0]), int(time_val[1])))
                    op_availability.insert(0, (0, 0))
                ##!~ /Palich

                # op_volume = opelement.xpath("xmlns:extensionElements/ltsm:props[@name='volume']/@value", namespaces=nsmap) or [""]
                # op_stream = opelement.xpath("xmlns:extensionElements/ltsm:props[@name='stream']/@value", namespaces=nsmap) or [""]
                
                for dc in root.iterfind("bpmndi:BPMNDiagram", nsmap):
                    op_x = dc.xpath("bpmndi:BPMNPlane/bpmndi:BPMNShape[@bpmnElement='" + opelement.attrib.get("id") + "']/dc:Bounds/@x", namespaces=nsmap)
                    op_y = dc.xpath("bpmndi:BPMNPlane/bpmndi:BPMNShape[@bpmnElement='" + opelement.attrib.get("id") + "']/dc:Bounds/@y", namespaces=nsmap)
                    # temp_coords[opelement.attrib.get("id")] = {"x": op_x and op_x[0], "y": op_y and op_y[0]}

                # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ UUID –≤–∏–¥–µ, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã
                tempop = tempproc.add_operation(opelement.attrib.get("name"), op_volume[0].replace(',', '.'),
                                                op_stream[0].replace(',', '.'), opelement.attrib.get("id"),
                                                templ_uuid.text if templ_uuid is not None else uuid1())
                if DEBUG:
                    print("\t\t" + tempop.ID, tempop.Name, tempop.A, tempop.AP, end="")
                if DEBUG:
                    if opelement.find("xmlns:performer", nsmap) is None:
                        print(" –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", end=" ")
                    else:
                        print(" –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞:", end=" ")
                
                #—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã penalty
                dyn.penalty[tempop.ID] = ((float(op_penalty_start[0].replace(',', '.')), (float(op_penalty_angle[0].replace(',', '.'))), 0))
                #—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã availability
                dyn.availability[tempop.ID] = op_availability[:]
                #print(dyn.availability)
                
                # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                # –∏–∑–º–µ–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –µ—Å–ª–∏ –µ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ "–≤ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–ø–∏—Å–∏", —Ç–æ —Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 1.0
                # –∏–Ω–∞—á–µ –∑–∞—á–µ–º –≤–æ–æ–±—â–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å
                for performerelement in opelement.iterfind("xmlns:performer", nsmap):
                    dyn.ProductivityMatrix[tempop.ID, performerelement.find("xmlns:resourceRef", nsmap).text] = \
                        float((performerelement.xpath("xmlns:resourceParameterBinding/xmlns:formalExpression/text()", namespaces=nsmap) or [1])[0])
                    if DEBUG:
                        print(performerelement.find("xmlns:resourceRef", nsmap).text, end=" ")
                if DEBUG:
                    print()
            if DEBUG:
                from pprint import pprint
                pprint(dyn.ProductivityMatrix)

            evnt = procelement.find("xmlns:startEvent", nsmap)
            start_event = evnt.attrib.get("id")
            evnt = procelement.find("xmlns:endEvent", nsmap)
            end_event = evnt.attrib.get("id")

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å

            print("\t–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π")

            # –ø—Ä—è–º—ã–µ —Å–≤—è–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            print("\t\t–ø—Ä—è–º—ã–µ —Å–≤—è–∑–∏")
            lnks = dict()
            for link in procelement.iterfind("xmlns:sequenceFlow", nsmap):
                # –µ—Å–ª–∏ —Å–≤—è–∑—ã–≤–∞—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∏—Å–ª—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –º–æ–¥–µ–ª–∏,
                # —Ç–æ —Å–≤—è–∑—ã–≤–∞–µ–º –∏—Ö –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ
                legal_op_list = [op[1].ID for op in dyn.op_iter()]
                if link.attrib.get("sourceRef") in legal_op_list and link.attrib.get("targetRef") in legal_op_list:
                    tempproc.add_link(link.attrib.get("sourceRef"), link.attrib.get("targetRef"))
                    if DEBUG:
                        print("\t\t\t" + link.attrib.get("sourceRef") + " - " + link.attrib.get("targetRef"))
                # –∏–Ω–∞—á–µ –≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–≤—è–∑—è–º
                elif link.attrib.get("sourceRef") not in [start_event, end_event] and link.attrib.get("targetRef") not in [start_event, end_event]:
                    lnks[link.attrib.get("id")] = {'src': link.attrib.get("sourceRef"), 'tgt': link.attrib.get("targetRef")}

            # –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º gateways –∏ —Å—Ç—Ä–æ–∏–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏, –∏—Å–∫–ª—é—á–∞—è –∏—Ö
            # —Å–≤—è–∑–∏ —Ç–∏–ø–∞ –ò
            print("\t\t—Å–≤—è–∑–∏ —Ç–∏–ø–∞ –ò")
            pg = dict()
            for pargat in procelement.iterfind("xmlns:parallelGateway", nsmap):
                if pargat.attrib.get("gatewayDirection") == 'Diverging':
                    src_op = lnks[pargat.find("xmlns:incoming", nsmap).text].get('src')
                    if DEBUG:
                        print("\t\t\t" + src_op, end=" -> ")
                    grp = 1
                    for outl in pargat.iterfind("xmlns:outgoing", nsmap):
                        # —Å–≤—è–∑–∏ —Å —Ä–∞–∑–Ω—ã–º grp —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ "–ò"
                        tempproc.add_link(src_op, lnks[outl.text].get("tgt"), fwd_group=grp)
                        grp += 1
                        if DEBUG:
                            print(lnks[outl.text].get("tgt"), end=", ")
                    if DEBUG:
                        print()
                if pargat.attrib.get("gatewayDirection") == 'Converging':
                    dst_op = lnks[pargat.find("xmlns:outgoing", nsmap).text].get('tgt')
                    grp = 1
                    for inpl in pargat.iterfind("xmlns:incoming", nsmap):
                        tempproc.add_link(lnks[inpl.text].get("src"), dst_op, rev_group=grp)
                        grp += 1
                        if DEBUG:
                            print("\t\t\t" + src_op + " - " + lnks[outl.text].get("tgt"))

            # —Å–≤—è–∑–∏ —Ç–∏–ø–∞ –ò–õ–ò
            print("\t\t—Å–≤—è–∑–∏ —Ç–∏–ø–∞ –ò–õ–ò")
            eg = dict()
            for exgat in procelement.iterfind("xmlns:exclusiveGateway", nsmap):
                if exgat.attrib.get("gatewayDirection") == 'Diverging':
                    src_op = exgat.find("xmlns:incoming", nsmap).text
                    if src_op in lnks:
                        src_op = lnks[src_op].get('src')
                        if DEBUG:
                            print("\t\t\t" + src_op, end=" -> ")

                        for outl in exgat.iterfind("xmlns:outgoing", nsmap):
                            tempproc.add_link(src_op, lnks[outl.text].get("tgt"))
                            if DEBUG:
                                print(lnks[outl.text].get("tgt"), end=", ")
                        if DEBUG:
                            print()

                if exgat.attrib.get("gatewayDirection") == 'Converging':
                    dst_op = exgat.find("xmlns:outgoing", nsmap).text
                    if dst_op in lnks:
                        dst_op = lnks[dst_op].get('tgt')
                        if DEBUG:
                            print("\t\t\t", end="")
                        for inpl in exgat.iterfind("xmlns:incoming", nsmap):
                            tempproc.add_link(lnks[inpl.text].get("src"), dst_op)
                            if DEBUG:
                                print(lnks[inpl.text].get("src"), end=", ")
                        if DEBUG:
                            print(" -> " + dst_op)
        #exit()
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ BPMN-—Ñ–∞–π–ª—É –º–æ–¥–µ–ª—å
        return dyn

    def res_iter(self):
        """–ò—Ç–µ—Ä–∞—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∞–º"""
        for clust in self.ClustList.values():
            for res in clust.ResList.values():
                yield (clust, res)

    def op_iter(self):
        """–ò—Ç–µ—Ä–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º.
        :return (process, operation): –∫–æ—Ä—Ç–µ–∂ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        for proc in self.ProcList.values():
            for op in proc.OpList.values():
                yield (proc, op)

    def AddProc(self, pname, pid=None):
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –º–æ–¥–µ–ª—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å"
        newproc = UniProcess(pname, pid)
        self.ProcList[newproc.ID] = newproc
        return newproc

    def DelProc(self, pid):
        "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ –º–æ–¥–µ–ª–∏. –û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª—è—é—Ç—Å—è —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞ Python"
        del self.ProcList[pid]

    def get_proc(self, proc_id):
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"
        return self.ProcList[proc_id]

    def get_proc_op(self, op_id):
        "–ü–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—ã (–ø—Ä–æ—Ü–µ—Å—Å, –æ–ø–µ—Ä–∞—Ü–∏—è) –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –æ–ø–µ—Ä–∞—Ü–∏–∏"
        for proc in self.ProcList.values():
            if op_id in proc.OpList:
                return (proc, proc.OpList[op_id])

    def set_restriction(self, op_id, ts=None, tf=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–ï–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
        :param op_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        :param ts: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        :param tf: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        """

        def merge_intervals(intervals):
            """
            A simple algorithm can be used:
            1. Sort the intervals in increasing order
            2. Push the first interval on the stack
            3. Iterate through intervals and for each one compare current interval
               with the top of the stack and:
               A. If current interval does not overlap, push on to stack
               B. If current interval does overlap, merge both intervals in to one
                  and push on to stack
            4. At the end return stack
            """
            sorted_by_lower_bound = sorted(intervals, key=lambda tup: tup[0])
            merged = []

            for higher in sorted_by_lower_bound:
                if not merged:
                    merged.append(higher)
                else:
                    lower = merged[-1]
                    # test for intersection between lower and higher:
                    # we know via sorting that lower[0] <= higher[0]
                    if higher[0] <= lower[1]:
                        upper_bound = max(lower[1], higher[1])
                        merged[-1] = (lower[0], upper_bound)  # replace by merged interval
                    else:
                        merged.append(higher)
            return merged

        if op_id in self.restriction:

            if ts is not None and tf is not None:
                a = self.restriction[op_id][:]
                a.append((ts, tf))
                self.restriction[op_id] = merge_intervals(a)
            else:
                del self.restriction[op_id]
        else:
            if ts is not None and tf is not None:
                self.restriction[op_id] = [(ts, tf)]

    def get_availability(self, op_id, time):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —É—á—ë—Ç–æ–º –∑–∞–ø—Ä–µ—Ç–æ–≤ –¥–ª—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π. –õ–∏—Å—Ç –º–æ–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.
        :param op_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        :param time: –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        :return: 1 –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞, 0 - –µ—Å–ª–∏ –Ω–µ—Ç
        """
        availability_result = 1  # –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–¥–µ–Ω–∏–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–≥–¥–∞
        restriction_result = 1  # –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–¥–µ–Ω–∏–π –æ –∑–∞–ø—Ä–µ—Ç–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–µ—Ç
        for t, a in self.availability.get(op_id, []):
            if time >= t:
                availability_result = a
        for t in self.restriction.get(op_id, []):
            if time >= t[0] and time < t[1]:
                restriction_result = 0
            else:
                restriction_result = 1

        return availability_result * restriction_result

    def get_penalty(self, op_id, time):
        """
        DEPRECATED
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        :param op_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        :param time: –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        :return: –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —à—Ç—Ä–∞—Ñ–∞
        """

        if not self.penalty.get(op_id, False):
            return 0

        (startTime, angle, fine) = self.penalty[op_id]

        penalty_result = angle if time > startTime else 0

        return penalty_result

    def get_res_availability(self, res_id, time):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        –õ–∏—Å—Ç –º–æ–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.
        :param res_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        :param time: –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        :return: 1 –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞, 0 - –µ—Å–ª–∏ –Ω–µ—Ç
        """
        availability_result = 1  # –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–¥–µ–Ω–∏–π –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —Ä–µ—Å—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞
        for t, a in self.res_availability.get(res_id, []):
            if time >= t:
                availability_result = a

        return availability_result

    def get_clust(self, clust_id):
        "–ü–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"
        return self.ClustList[clust_id]

    def get_clust_res(self, res_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—ã (–∫–ª–∞—Å—Ç–µ—Ä, —Ä–µ—Å—É—Ä—Å) –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Ä–µ—Å—É—Ä—Å–∞
        :param res_id:
        :return: –∫–æ—Ä—Ç–µ–∂ (–∫–ª–∞—Å—Ç–µ—Ä, —Ä–µ—Å—É—Ä—Å)
        """
        for clust in self.ClustList.values():
            if res_id in clust.ResList:
                return (clust, clust.ResList[res_id])

    def AddClust(self, cname, bandw=0, cid=None):
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ –º–æ–¥–µ–ª—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä"
        newclust = UniClust(cname, bandw, cid)
        self.ClustList[newclust.ID] = newclust
        return newclust

    def DelClust(self, cid):
        "–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–∑ –º–æ–¥–µ–ª–∏"
        del self.ClustList[cid]

    def get_productivity(self, op_id, res_id):
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ op –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ res"

        # OLD CODE
        #		prod = 0 # –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        # 		for trigger, val in self.ProductivityMatrix[(op, res)]:
        # 			#print (trigger, val)
        # 			if t > trigger: prod = val
        # 		return prod
        # END OF OLD
        return self.ProductivityMatrix.get((op_id, res_id), 0)

    def calculate_priorities(self, t=None):
        """–†–∞—Å—á—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–ø—Ä—è–∂—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π) –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        –Ω–∞ —Ç–µ–∫—É—â–∏–π –∏–ª–∏ –∑–∞–¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏.
        –í–Ω–∏–º–∞–Ω–∏–µ! –í–µ–¥—ë—Ç—Å—è —Ä–∞—Å—á—ë—Ç –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞, –∞ –Ω–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –≤—Ä–µ–º–µ–Ω–∏.
        :param t: –ó–∞–¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Ä–∞—Å—á—ë—Ç –≤–µ–¥—ë—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–æ–¥–µ–ª–∏ self.time
        """
        if DEBUG_L2:
            print("–†–∞—Å—á—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–ø—Ä—è–∂—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤)")

        if t is None:
            t = self.time

        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        for proc_prior in self.ProcList.values():
            if DEBUG_L2:
                print("\t–ü—Ä–æ—Ü–µ—Å—Å", proc_prior.Name)
            # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤–µ—Ä—à–∏–Ω–∞–º –≥—Ä–∞—Ñ–∞
            for n in proc_prior.graph.nodes():
                if DEBUG_L2:
                    print("\t\t–û–ø–µ—Ä–∞—Ü–∏—è", self.get_proc_op(n)[1].Name)

                # –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                op_exec_flag = True if self.timetable[-1].get((t, n), False) else False

                # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ - –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å –µ—ë
                if op_exec_flag and len(self.penalty.get(n, [])) != 0 and t >= self.penalty[n][0]:
                    #PDA: –∑–∞–º–µ–Ω–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–≤—ã—à–µ–Ω–∏—é –¥–∏—Ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ (—à—Ç—Ä–∞—Ñ—É–µ–º –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É angle: fine, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –≤ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å J4 —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∞–≤–Ω—ã–º angle)
                    #self.penalty[n] = self.penalty[n][1]
                    self.penalty[n] = (self.penalty[n][0], self.penalty[n][1], self.penalty[n][1])
                # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å: —Å—É–º–º–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º + —Å—É–º–º–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º

                summa_pred = 0
                summa_parallel = 0

                # –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–º —Ä–∞–±–æ—Ç–∞–º
                for pred_op_id in proc_prior.graph.predecessors(n):

                    # –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
                    for (clust, res) in self.res_iter():
                        # —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–û—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ * –º–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞ sigma_i_kappa_wave)

                        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å, —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
                        # summa = max(float("2"), summa - (1 if res.ID ==

                        # –≤–∫–ª—é—á–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
                        # –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                        summa_pred += (1 if res.ID == self.timetable[-1].get((t, pred_op_id), (-1, -1))[0] else 0) * \
                                      (
                                          # –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç * epsilon * theta
                                          # epsilon –∏ theta –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–≤–Ω—ã 1, —Ç–∞–∫ –∫–∞–∫ –≤–∫–ª—é—á–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                                              self.OpPriorMatrix.get(pred_op_id,
                                                                     self.operation_init_conditions.get(pred_op_id,
                                                                                                        0)) +
                                              # —Ä–µ—Å—É—Ä—Å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                                              self.ResPriorMatrix.get(res.ID,
                                                                      self.resource_init_conditions.get(res.ID, 0)) +
                                              # –º–∞—Ç—Ä–∏—Ü—É eta –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å —Å –º–µ–Ω—å—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
                                              # self.get_productivity(pred_op_id, res.ID) -
                                              # —à—Ç—Ä–∞—Ñ—ã
                                              self.get_penalty(pred_op_id, t) +
                                              # –ø–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç * –º–∞–∫—Å. –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                                              self.StreamPriorMatrix.get(pred_op_id,
                                                                         self.stream_init_conditions.get(pred_op_id,
                                                                                                         0)) *
                                              self.get_productivity(pred_op_id, res.ID)
                                      )
                        if DEBUG_L2 and (res.ID == self.timetable[-1].get((t, pred_op_id), (-1, -1))[0]):
                            print("\t\t\t–†–∞–±–æ—Ç–∞–µ—Ç", self.get_proc_op(pred_op_id)[1].Name)

                    # —É—á—ë—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–∏—Å–∫–ª—é—á–∞—é—â–µ–µ –∏–ª–∏)
                    # TODO –∏–∑—É—á–∏—Ç—å –æ—à–∏–±–∫—É –¥–≤–æ–π–Ω–æ–≥–æ —É—á—ë—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞—Ö

                    for s in proc_prior.graph.successors(pred_op_id):
                        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –ø—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º -
                        # —Ç–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        if s == n:
                            continue
                        if proc_prior.graph.edges[pred_op_id, s]['fwd'] == proc_prior.graph.edges[pred_op_id, n]['fwd']:
                            # –≥—Ä—É–ø–ø–∞ 'fwd' —Å–æ—Å–µ–¥–Ω–µ–π –¥—É–≥–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 'fwd' —Ç–µ–∫—É—â–µ–π –¥—É–≥–∏, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–ª–∏
                            for (clust, res) in self.res_iter():
                                # —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–û—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ * –º–Ω–æ–∂–∏—Ç–µ–ª—å –õ–∞–≥—Ä–∞–Ω–∂–∞ ùúé_ùëñùúò~)

                                # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å, —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
                                # summa = max(float("2"), summa -
                                # –≤–∫–ª—é—á–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
                                # –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                                summa_parallel += (1 if res.ID == self.timetable[-1].get((t, s), (-1, -1))[0] else 0) * \
                                                  (
                                                      # –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç * epsilon * theta
                                                      # epsilon –∏ theta –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–≤–Ω—ã 1, —Ç–∞–∫ –∫–∞–∫ –≤–∫–ª—é—á–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                                                          self.OpPriorMatrix.get(s,
                                                                                 self.operation_init_conditions.get(s,
                                                                                                                    0)) +
                                                          # —Ä–µ—Å—É—Ä—Å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                                                          self.ResPriorMatrix.get(res.ID,
                                                                                  self.resource_init_conditions.get(
                                                                                      res.ID, 0)) +
                                                          # –º–∞—Ç—Ä–∏—Ü—É eta –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å —Å –º–µ–Ω—å—à–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
                                                          # self.get_productivity(pred_op_id, res.ID) -
                                                          # —à—Ç—Ä–∞—Ñ—ã
                                                          self.get_penalty(pred_op_id, t) +
                                                          # –ø–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç * –º–∞–∫—Å. –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                                                          self.StreamPriorMatrix.get(s,
                                                                                     self.stream_init_conditions.get(s,
                                                                                                                     0)) *
                                                          self.get_productivity(s, res.ID)
                                                  )

                                # 					for succ_op_id in proc_prior.graph.successors_iter(n):
                                # 						for (clust,res) in self.res_iter():
                                # 							summa = summa - (self.OpPriorMatrix[succ_op_id] if
                                # self.timetable[len(self.timetable)-1].get((t,succ_op_id), (-1, -1))[0] == res.ID
                                # else 0)

                # —Å–ª–∞–≥–∞–µ–º–æ–µ —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π "p"
                if DEBUG and False:
                    print()
                    print(1 if self.get_proc_op(n)[1].Status == OP_COMPLETED else 0)

                # –±–µ—Ä—ë–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

                if NORMALIZE_LOG_ANGLE and (summa_pred + summa_parallel) > 1:
                    self.OpPriorMatrix[n] = self.OpPriorMatrix.get(n, self.operation_init_conditions.get(n, 0)) + \
                                                  log10(summa_pred + summa_parallel)
                    if DEBUG_NORMALIZE:
                        print("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ ùúì¬∫", self.OpPriorMatrix.get(n, self.operation_init_conditions.get(n, 0)) +
                              summa_pred + summa_parallel, self.OpPriorMatrix[n])
                else:
                    self.OpPriorMatrix[n] = self.OpPriorMatrix.get(n, self.operation_init_conditions.get(n, 0)) + \
                                            summa_pred + summa_parallel

                if DEBUG_L2:
                    print("\t\t\tùúì¬∫:", self.OpPriorMatrix[n], "(", summa_pred, summa_parallel, ")")

                # –ü–æ—Ç–æ–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å:

                # –±–µ—Ä—ë–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                # self.StreamPriorMatrix.get(n, self.stream_init_conditions.get(n, 0))
                sum_stream = 0  # —Å—É–º–º–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º "–ò", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ò–õ–ò"

                # —Å—É–º–º–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º
                for (clust, res) in self.res_iter():
                    # –æ–ø–µ—Ä–∞—Ü–∏–∏ - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏
                    for succ_op_id in proc_prior.graph.successors(n):
                        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å, —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
                        # sum_stream = max(2, sum_stream - (self.OpPriorMatrix[succ_op_id] if
                        sum_stream = (sum_stream +
                                        # (self.OpPriorMatrix[succ_op_id] if
                                        #             self.timetable[len(self.timetable) - 1].get(
                                        #                 (t, succ_op_id), (-1, -1))[0] == res.ID else 0)
                                        (1 if res.ID == self.timetable[-1].get((t, succ_op_id), (-1, -1))[0] else 0) *
                                        # –≤–∫–ª—é—á–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
                                        # –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                                        (
                                            # –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç * epsilon * theta
                                            # epsilon –∏ theta –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–≤–Ω—ã 1, —Ç–∞–∫ –∫–∞–∫ –≤–∫–ª—é—á–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                                                self.OpPriorMatrix.get(succ_op_id,
                                                                       self.operation_init_conditions.get(succ_op_id,
                                                                                                          0)) +
                                                # —Ä–µ—Å—É—Ä—Å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                                                self.ResPriorMatrix.get(res.ID,
                                                                        self.resource_init_conditions.get(res.ID, 0)) +
                                                # TODO –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—ã eta, q
                                                #  eta - q +
                                                # –ø–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç * –º–∞–∫—Å. –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                                                self.StreamPriorMatrix.get(succ_op_id,
                                                                           self.stream_init_conditions.get(succ_op_id,
                                                                                                           0)) *
                                                self.get_productivity(succ_op_id, res.ID)
                                        )
                                        )

                # sum –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø—Ä–∏–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if NORMALIZE_LOG_ANGLE and (self.StreamPriorMatrix.get(n, self.stream_init_conditions.get(n, 0)) - \
                                            sum_stream) > 1:
                    self.StreamPriorMatrix[n] = log10(
                        self.StreamPriorMatrix.get(n, self.stream_init_conditions.get(n, 0)) - \
                        sum_stream)
                    if DEBUG_NORMALIZE:
                        print("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ ùúì‚Åø",
                              self.StreamPriorMatrix.get(n, self.stream_init_conditions.get(n, 0)) - \
                              sum_stream, self.StreamPriorMatrix[n])

                else:
                    self.StreamPriorMatrix[n] = self.StreamPriorMatrix.get(n, self.stream_init_conditions.get(n, 0)) - \
                                                sum_stream
                    # - sum_stream_p –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

                if DEBUG_L2:
                    print("\t\t\tùúì‚Åø:", self.StreamPriorMatrix[n])

                if DEBUG_L2:
                    print()

                if DEBUG_CTRL:
                    self.ograph[n].append(self.OpPriorMatrix[n])
                    self.pgraph[n].append(self.StreamPriorMatrix[n])
                    # –ø–∏—à–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É ID —Ä–µ—Å—É—Ä—Å–∞ –∏–ª–∏ underscore
                    # self.work[n].append(string.ascii_lowercase[int(self.timetable[-1][(t, n)][0][3:])] if (t, n) in self.timetable[-1] else
                    self.work[n].append(self.timetable[-1][(t, n)][0][3:] if (t, n) in self.timetable[-1] else
                                        ('_' if self.get_availability(n, t) else ' '))

        # –†–µ—Å—É—Ä—Å–Ω–∞—è –º–æ–¥–µ–ª—å: –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
        if DEBUG_L2:
            print("\t–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤:", end=" ")

        for (clust, res) in self.res_iter():
            self.ResPriorMatrix[res.ID] = self.ResPriorMatrix.get(res.ID, self.resource_conditions.get(res.ID, 0))
            if DEBUG_L2:
                print("ùúì·¥æ[" + res.Name + "]:", self.ResPriorMatrix[res.ID], end=", ")


    def integrate(self, ts=0.0, tf=float('inf'), options=None):
        """–ü—Ä–æ—Ö–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è.
        :param ts: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        :param tf: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        :param options: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–æ–≤
                        method: –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è (FIFO, LIFO, PULP, EXEC)
                        relaxed: —Å–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        if DEBUG_L1:
            print()
            print('*' * 60)
            print("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")

        OpFront = []  # —Ñ—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç !!! —Å–∏–ª—å–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–µ –º–µ–Ω—è—Ç—å –Ω–∞ —Å–ª–æ–≤–∞—Ä—å!
        ResFront = []  # —Ñ—Ä–æ–Ω—Ç —Ä–µ—Å—É—Ä—Å–æ–≤	!!! —Å–∏–ª—å–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ—Ä—è–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–µ –º–µ–Ω—è—Ç—å –Ω–∞ —Å–ª–æ–≤–∞—Ä—å!
        self.Record = 0  # –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

        if options is None:
            method = 'FIFO'
            relaxed = True
            debug_tab = 0
        else:
            method = options.get('method', 'FIFO')
            relaxed = options.get('relaxed', False)
            debug_tab = options.get('debug_tab', 0)

        if method == 'EXEC':
            croptt = {k: v for k, v in self.timetable[-1].items() if k[0] <= tf}
            self.timetable[-1] = croptt.copy()
        else:
            self.timetable.append({})  # –î–ª—è —Ä–∞–±–æ—Ç—ã Any Time Algorithm —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

        if self.p:
            self.p.send("INF: –°—Ç–∞—Ä—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è " + method)

        def MakeOpFront(time):
            """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–∞–±–æ—Ç –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π,
            –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏:
            –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ = 1
            """

            if DEBUG_L2:
                print("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–∞–±–æ—Ç")

            if self.p: self.p.send("INF: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–∞–±–æ—Ç –Ω–∞ " + str(time))
            del OpFront[:]

            # d2 = dict((key, [G[1] for G in g]) for (key, g) in groupby(sorted( (val, key) for (key, val) in d.items() ), lambda X: X[0]) )

            # for prev_op in [{n: self.graph.in_edges(n, True)} for n in self.graph.nodes_iter()]:

            # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–∞–±–æ—Ç —Å –∏—Å–∫–ª—é—á–∞—é—â–∏–º –ò–õ–ò:
            # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≥—Ä–∞—Ñ–∞ –≤—Ö–æ–¥—è—â–∏–µ –¥—É–≥–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —Ç–∏–ø—É 'rev_group'.
            # –∑–Ω–∞—á–µ–Ω–∏—è (A - X) –ø–µ—Ä–µ–º–Ω–æ–∂–∞—é—Ç—Å—è –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≥—Ä—É–ø–ø 'rev' (—Ç.–µ. –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–±–æ—Ç—ã)
            # –∏ –∑–∞—Ç–µ–º —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø
            for proc in self.ProcList.values():
                for n in proc.graph.nodes():
                    if False:
                        print(time, proc.get_op(n).Status, proc.get_op(n).Name)
                    candidate_operation = proc.get_op(n)
                    if candidate_operation.Status == OP_WAIT or candidate_operation.Status == OP_EXEC:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:

                        # –ó–∞–¥–∞—á–∞ - –ø–æ–Ω—è—Ç—å, –≤—Å–µ –ª–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∏ –º–æ–∂–Ω–æ –ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é. –ù–æ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ–π –ª–æ–≥–∏–∫–∏.
                        # –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ—Ç –∫—É—Å–æ–∫ –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏.
                        # –ë–µ—Ä—ë–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ n
                        # proc.graph.predecessors(n)

                        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á - —ç—Ç–æ id –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞,
                        # –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ –ø–æ–ª–µ rev –≤–µ—Ç–≤–∏ –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –≤ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é n
                        # { p: proc.graph.edges[p, n]['rev'] for p in proc.graph.predecessors(n) }

                        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å–µ—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—Å—ë –Ω–∞–æ–±–æ—Ä–æ—Ç: –Ω–∞ –Ω—É–ª–µ–≤–æ–º –º–µ—Å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è rev, –∞ –Ω–∞ –ø–µ—Ä–≤–æ–º id –æ–ø–µ—Ä–∞—Ü–∏–π.
                        # (val, key) for (key, val) in {p: proc.graph.edges[p, n]['rev'] for p in proc.graph.predecessors(n)}.items())


                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é rev —Ç–∞–∫, —á—Ç–æ–±—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø —à–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                        # sorted((val, key) for (key, val) in {p: proc.graph.edges[p, n]['rev'] for p in proc.graph.predecessors(n)}.items()), lambda x: x[0])


                        # –ü–∞–∫—É–µ–º id –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—ã –∏ –ø–æ–º–µ—â–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å.
                        # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –∫–ª—é—á - —ç—Ç–æ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–∞—Å—Å–∏–≤ id –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.
                        # –¢–æ –µ—Å—Ç—å, –≤ —ç—Ç–æ–º —Å–ª–æ–≤–∞—Ä–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º –≤ –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –ò –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ò–õ–ò.
                        # groupby(sorted((val, key) for (key, val) in {p: proc.graph.edges[p, n]['rev']
                        #   for p in proc.graph.predecessors(n)}.items()), lambda x: x[0]))

                        # –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –≤—ã—Ö–æ–¥ —Ç–∞–∫–æ–π:

                        # 1: A, B, C
                        # 2: D,E

                        # –¢–æ –µ—Å—Ç—å, –æ–ø–µ—Ä–∞—Ü–∏–∏ A,B,C –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –ª–æ–≥–∏–∫–æ–π –ò–õ–ò. –û–ø–µ—Ä–∞—Ü–∏–∏ D –∏ E –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Ç–æ–∂–µ –ª–æ–≥–∏–∫–æ–π –ò–õ–ò –º–µ–∂–¥—É —Å–æ–±–æ–π.
                        # –ù–æ —ç—Ç–∏ –¥–≤–µ –≥—Ä—É–ø–ø—ã –≤–µ—Ç–≤–µ–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –ª–æ–≥–∏–∫–æ–π –ò.
                        # –§–∏–∑–∏—á–µ—Å–∫–∏ —ç—Ç–æ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
                        # –∫–∞–∫–∞—è-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑ ABC –∏ –∫–∞–∫–∞—è-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑ DE.

                        # –¢–µ–ø–µ—Ä—å —Å–æ–±–µ—Ä—ë–º –ª–æ–≥–∏–∫—É –≤ –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å. –ó–Ω–∞—á–µ–Ω–∏—è–º–∏ –±—É–¥—É—Ç –Ω—É–ª–∏ –¥–ª—è —Ç–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å,
                        # –µ–¥–∏–Ω–∏—Ü—ã - –¥–ª—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö.
                        # [(0 if proc.get_op(gr[1]).Status == OP_FLOW_COMPLETED or proc.get_op(gr[1]).Status == OP_COMPLETED else 1) for gr in g]

                        # –ù–∞—à –±–æ–ª—å—à–æ–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞–Ω–µ—Ç —Ç–∞–∫–∏–º:

                        # 1: 0, 0, 1
                        # 2: 0, 0

                        # –ü—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –° –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å.

                        # –î–∞–ª—å—à–µ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –≤ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ –∫–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏:
                        # # —É—á—ë—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                        #                         if sum([reduce(lambda x, y: x * y, v) for v in logic.values()]) == 0:

                        # –§—É–Ω–∫—Ü–∏–µ–π reduce –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ–º 0 –∏ 1 –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ.
                        # –ü–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏–µ–º –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—å –∫–∞–∫–∞—è-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å. –≠—Ç–æ –ª–æ–≥–∏–∫–∞ –ò–õ–ò.
                        # –ê –ø–æ—Ç–æ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å—É–º–º–∏—Ä—É–µ–º –∏ —ç—Ç–∏–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≥—Ä—É–ø–ø—ã, –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –ò - –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å.
                        # –¢–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å - –º–æ–∂–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ —Ä–∞–±–æ—Ç—É —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.

                        logic = dict((key, [(0 if proc.get_op(gr[1]).Status == OP_FLOW_COMPLETED or
                                                  proc.get_op(gr[1]).Status == OP_COMPLETED
                                                  #or (proc.get_op(gr[1]).Status == OP_EXEC and candidate_operation.A > 0)   # PAVLOV: –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–≥–¥–∞ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                                                  else 1) for gr
                                            in g]) for (key, g) in groupby(sorted((val, key) for (key, val) in
                                                                                  {p: proc.graph.edges[p, n]['rev'] for
                                                                                   p
                                                                                   in proc.graph.predecessors(
                                                                                      n)}.items()), lambda x: x[0]))
                        # —É—á—ë—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                        if sum([reduce(lambda x, y: x * y, v) for v in logic.values()]) == 0:
                            # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–∞–±–æ—Ç—ã, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–≤–∏ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
                            alt_path_sum = 0
                            for op_id in proc.graph.predecessors(n):
                                alt_path_sum += sum([proc.get_op(p).XP for p in proc.graph.successors(op_id) if
                                                     ((p != n) and
                                                      (proc.graph.edges[op_id, p]['fwd'] == proc.graph.edges[op_id, n][
                                                          'fwd']))])
                            if alt_path_sum == 0:
                                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
                                if self.get_availability(candidate_operation.ID, time):
                                    OpFront.append(candidate_operation.ID)

            if DEBUG_L2 or DEBUG_FRONT:
                print("\t–§—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç:\n", [self.get_proc_op(o)[1].Name for o in OpFront])

            if self.p: self.p.send("INF: –§—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω")

        def MakeResFront(time):
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ."
            if DEBUG_L2:
                print("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")

            if self.p: self.p.send("INF: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ " + str(time))
            del ResFront[:]
            for clust in self.ClustList.values():
                for res in clust.ResList.values():
                    if self.get_res_availability(res.ID, time):
                        res.Release()  # —Å–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å
                        ResFront.append(res.ID)

            if DEBUG_L2:
                print("\t", [self.get_clust_res(r)[1].Name for r in ResFront])

            if self.p: self.p.send("INF: –§—Ä–æ–Ω—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω")

        def SolverFIFO(time):
            """–†–µ—à–∞—Ç–µ–ª—å –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ FIFO"""

            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
            # OpFront.sort(key=lambda op_id: self.OpPriorMatrix.get(op_id, 0), reverse=True)
            OpFront.sort(key=lambda op_id: self.get_proc_op(op_id)[1].Name, reverse=True)
            for op_id in OpFront:

                result = RES_REJECTED

                # –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                if not relaxed:
                    # –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Ç–æ–º –∂–µ —Ä–µ—Å—É—Ä—Å–µ
                    # –≤—Å–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ—Å—É—Ä—Å —Å –ø—Ä–æ—à–ª–æ–≥–æ —à–∞–≥–∞
                    res_id = self.timetable[len(self.timetable) - 1].get((time - 1, op_id), (-1, -1))[0]
                    if len(self.timetable) > 0 and res_id != -1:
                        res = self.get_clust_res(res_id)[1]
                        op_fifo = self.get_proc_op(op_id)[1]
                        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ –∑–∞–¥–∞–Ω–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ä–∞—Å—á–µ—Ç–æ–≤ (added by Palich)
                        # intens = min(res.MaxIntense, self.get_productivity(op_id, res.ID))
                        if res.MaxIntense:
                            intens = min(res.MaxIntense, self.get_productivity(op_id, res.ID))
                        else:
                            intens = self.get_productivity(op_id, res.ID)

                        # –ø—Ä–æ–±—É–µ–º, –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ª–∏ –Ω–∞ –Ω—ë–º –æ–ø–µ—Ä–∞—Ü–∏—è
                        # result = res.test_load(self.get_proc_op(op_id)[1], intens)

                        result = res.load_operation(op_fifo, intens)  # –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å
                        if result != RES_REJECTED:
                            if DEBUG_INTERRUPT:
                                print("\t", op_id, "–∑–∞–ø—É—Å–∫ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ä–µ—Å—É—Ä—Å–µ", res_id)
                            log_timetable(time, op_id, res_id, intens)  # –≤–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                            if DEBUG:
                                print(
                                    "t=" + str(time), op_fifo.Name, "[" + op_id + "] @", res.Name,
                                    "intens=" + str(intens), op_fifo.X,
                                    '->', op_fifo.A, "/", op_fifo.XP, '->', op_fifo.AP)
                            continue  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ
                        else:
                            if DEBUG_INTERRUPT:
                                print(op_id, "–Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∞", res_id)

                # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                for res_id in reversed(ResFront):
                    # if not relaxed:
                    # if False:
                    #     interr_op = resource_owner(time - 1, res_id)
                    #     if len(interr_op) > 0 and sum([1 for i in interr_op if self.get_proc_op(i[1])[1].AP -
                    #             self.get_proc_op(i[1])[1].XP > 0]):
                    #         continue

                    res = self.get_clust_res(res_id)[1]  # –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É (cluster, resource) –∏ –≤—ã–±–∏—Ä–∞–µ–º resource
                    
                    # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ –∑–∞–¥–∞–Ω–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ä–∞—Å—á–µ—Ç–æ–≤ (added by Palich)
                    if res.MaxIntense:
                        intens = min(res.MaxIntense, self.get_productivity(op_id, res_id))
                    else:
                        intens = self.get_productivity(op_id, res_id)
                    if intens != 0:  # –µ—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è = 0, —Ç–æ —Ä–∞–±–æ—Ç—É –∑–∞–ø—É–∫–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
                        proc_op = self.get_proc_op(op_id)
                        proc_fifo = proc_op[0]
                        op_fifo = proc_op[1]

                        result = RES_PROCESSING

                        # —É—á—ë—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (–∏—Å–∫–ª—é—á–∞—é—â–µ–µ –∏–ª–∏)
                        for p in proc_fifo.graph.predecessors(op_id):  # –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏
                            for s in proc_fifo.graph.successors(
                                    p):  # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –ø—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º
                                if s == op_id:
                                    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É —Å–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
                                    continue
                                # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ 'fwd' —Å–æ—Å–µ–¥–Ω–µ–π –¥—É–≥–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 'fwd' —Ç–µ–∫—É—â–µ–π –¥—É–≥–∏
                                if proc_fifo.graph.edges[p, s]['fwd'] == proc_fifo.graph.edges[p, op_id]['fwd']:
                                    if proc_fifo.get_op(s).X != 0:  # –µ—Å–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–≤—å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É
                                        result = RES_REJECTED  # –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ
                                        break

                                        #	op_stop_list.append(op_id)
                                        # else:
                                        #	op_stop_list.append(s)					# –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥—Ä—É–≥–∏–º —Ä–∞–±–æ—Ç–∞–º

                        if result != RES_REJECTED:  # –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–µ—Ç–≤–µ–π
                            result = res.load_operation(op_fifo, intens)  # –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å
                            if result != RES_REJECTED:
                                log_timetable(time, op_id, res_id, intens)  # –≤–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                                if DEBUG:
                                    # print(time, op_id, res_id, intens, op.X, op.XP, '->', op.AP)
                                    print(
                                        "t=" + str(time), op_fifo.Name, "[" + op_id + "] @", res.Name, "intens=" +
                                        str(intens), op_fifo.X, '->', op_fifo.A, "/", op_fifo.XP, '->', op_fifo.AP)
                                    print(res.Name, "–≤—Ä–µ–º—è –Ω–∞—Ä–∞–±–æ—Ç–∫–∏", res.Fatigue)
                        else:
                            result = RES_REJECTED

                    else:
                        result = RES_REJECTED  # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–µ—Å—É—Ä—Å –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é)
                    if result != RES_REJECTED:  # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–µ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏

                        # DEBUG
                        # print str(time) + ": (" + str(op.ID) + ") " + op.Name + "  ->  ("+ str(res.ID) + ") " + res.Name + ", p: " + str(intens)
                        # END DEBUG
                        break  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç–µ

            # –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
            for proc_fifo, op_fifo in self.op_iter():
                conflict_flag = False
                # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –±—ã–ª–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ, –∞ —Ç–µ–ø–µ—Ä—å –µ—ë –Ω–µ—Ç
                if op_fifo.X != 0 and ((time, op_fifo.ID) in self.timetable[-1] or op_fifo.XP != op_fifo.AP):
                    if ((time - 1, op_fifo.ID) in self.timetable[-1]) and \
                            ((time, op_fifo.ID) not in self.timetable[-1]):
                        if DEBUG_INTERRUPT:
                            print("–†–∞–∑—Ä—ã–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏", op_fifo.Name, "–ø–æ –∑–æ–Ω–∞–º –≤–∏–¥–∏–º–æ—Å—Ç–∏")
                        conflict_flag = True
                    if ((time - 1, op_fifo.ID) in self.timetable[-1]) and \
                            ((time, op_fifo.ID) in self.timetable[-1]) and \
                            (self.timetable[-1][(time - 1, op_fifo.ID)][0] !=
                             self.timetable[-1][(time, op_fifo.ID)][0]):
                        if DEBUG_INTERRUPT:
                            print("–†–∞–∑—Ä—ã–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏", op_fifo.Name, "–ø–æ —Ä–µ—Å—É—Ä—Å—É")
                        conflict_flag = True
                    self.conflict_count += 1
                if not options.get('relaxed') and conflict_flag:
                    op_start_time = operation_start(op_fifo.ID)
                    if op_start_time is not None:
                        # –æ—Ç–∫–∞—Ç –Ω–∞ —Ç–æ—á–∫—É, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—é –∏ –∑–∞–ø—Ä–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
                        if DEBUG_INTERRUPT:
                            print("–ó–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", self.get_proc_op(op_fifo.ID)[1].Name, "c", op_start_time,
                                  "–¥–æ", time)
                        self.set_restriction(op_fifo.ID, op_start_time, time)
                        if DEBUG_INTERRUPT:
                            print("–û—Ç–∫–∞—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ -> ", op_start_time)
                        self.execute_plan(0, op_start_time - 1)
                        if DEBUG_INTERRUPT:
                            print("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:", self.time)
                        return
            if DEBUG_L2:
                print("–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", self.restriction)

        def SolverLIFO(time):
            "–†–µ—à–∞—Ç–µ–ª—å –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É LIFO"
            OpFront.reverse()
            for job in OpFront:
                for res in ResFront:
                    intens = self.Productivity(job, res, time)
                    if intens != 0:  # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è = 0, —Ç–æ —Ä–∞–±–æ—Ç—É –∑–∞–ø—É–∫–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
                        Result = res.load_operation(job, intens)  # –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å
                    # print job.Name + ", " + res.Name + " p: " + str(intens)
                    else:
                        Result = RES_REJECTED
                    if Result != RES_REJECTED:  # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–µ –æ—Ç–∫–ª–æ–Ω–∏–ª
                        log_timetable(time, job, res)  # –≤–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                        break  # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç–µ

        def SolverNone(time):
            "–ü—É—Å—Ç–æ–π —Ä–µ—à–∞—Ç–µ–ª—å"
            pass

        def SolverExec(time):
            """–ò–º–∏—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
            for job_id in OpFront:
                # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –≤ —Ç–µ–∫—É—â–∏–π –ø–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏...
                if self.timetable[-1].get((time, job_id)):
                    for res_id in ResFront:
                        # –µ—â—ë –∏ –Ω–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–º —Ä–µ—Å—É—Ä—Å–µ...
                        if self.timetable[-1].get((time, job_id))[0] == res_id:
                            # ...—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∏ –ø–æ—Ç–æ–∫–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                            u = 1
                            up = self.timetable[-1].get((time, job_id))[1]
                            res = self.get_clust_res(res_id)[1]
                            op = self.get_proc_op(job_id)[1]

                            load_result = res.load_operation(op, up)  # –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å
                            if load_result != RES_REJECTED:  # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–µ –æ—Ç–∫–ª–æ–Ω–∏–ª
                                if DEBUG_EXEC:
                                    print("\t–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", op.Name, "u‚Åø", up, op.X, '->', op.A, op.XP, '->', op.AP)

        def SolverPULP(time):
            """–†–µ—à–∞—Ç–µ–ª—å, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—â–∏–π —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è PuLP https://projects.coin-or.org/PuLP"""

            # Create the 'prob' variable to contain the problem data
            prob = LpProblem(r"–ó–∞–¥–∞—á–∞ –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞".replace(' ','_'), LpMaximize)
            # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π: 0/1 - –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞
            m = len(OpFront) * len(ResFront)

            if m == 0:
                if DEBUG_PULP:
                    print("‚≠ïÔ∏è –ü—É—Å—Ç–æ–π —Ñ—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç")
            else:
                # —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è

                # H1
                # –≤ —Å–ø–∏—Å–∫–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –≥–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–µ
                # PAVLOV: 3.1.1 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ H1 –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞)
                c = []
                jr = []
                for job_id in OpFront:
                    for res_id in ResFront:
                        # c.append(self.OpPriorMatrix[job_id] + self.ResPriorMatrix[res_id])
                        # –≤ –≥–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –æ—Å–Ω–æ–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                        # —Å—Ç–æ–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ–ø—Ä—è–∂—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
                        c.append(self.OpPriorMatrix[job_id] +
                                 self.ResPriorMatrix[res_id] +
                                 5000 - self.get_clust_res(res_id)[1].price)  # max price - price
                        # self.penalty.get(job_id, (0,0,0))[2])
                        if DEBUG_L1:
                            jr.append((self.get_proc_op(job_id)[1].Name, res_id, c[-1]))
                            print("–í–∫–ª–∞–¥—ã –≤ –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω", self.OpPriorMatrix[job_id],
                                  self.ResPriorMatrix[res_id],
                                  5000 - self.get_clust_res(res_id)[1].price)
                # /PAVLOV: 3.1.1 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ H1 –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞)

                # —Å–ø–∏—Å–æ–∫ –∏—Å–∫–æ–º—ã—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π
                x = []

                # H2
                # —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ—Ç–æ–∫–æ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                cp = []
                # —Å–ø–∏—Å–æ–∫ –∏—Å–∫–æ–º—ã—Ö –ø–æ—Ç–æ–∫–æ–≤—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Ç 0 –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞
                # –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Ä–µ—Å—É—Ä—Å–µ
                xp = []

                # –¥–∞–ª–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
                # H3
                cphi1 = []
                # H4
                cphi2 = []
                # H5
                cphi3 = []
                # H6
                cpv1 = []
                # H7
                cpv2 = []

                # PuLP —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ –∏–º–µ–Ω–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ–Ω–∞ –∑–∞–¥–∞—Ç—å –≤ –≤–∏–¥–µ –∏–Ω–¥–µ–∫—Å–æ–≤,
                # –∞ –∑–∞—Ç–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                # PAVLOV: 3.1.2 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –≤ H2 –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞)
                index_cntr = 0
                for job_id in OpFront:
                    for res_id in ResFront:
                        product = self.get_productivity(job_id, res_id)  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

                        # H1
                        # –æ—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ - —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –æ—Ç 0 –¥–æ 1.
                        # –ê —Ç–∞–∫–∂–µ –ó–∞–ø—Ä–µ—Ç –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ = 0
                        x.append(LpVariable('u_%d_o%s_r%s' % (index_cntr, job_id, res_id), 0, 0 if product == 0 else 1,
                                            LpInteger))
                        index_cntr += 1

                        # –ø–æ—Ç–æ–∫–æ–≤—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ -
                        # –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ –ó–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        xp.append(LpVariable('u_%d_p%s_r%s' % (index_cntr, job_id, res_id), 0, product, LpContinuous))
                        index_cntr += 1

                        # TODO –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è ùúÇ –∏ ùìÜ

                        # H2
                        # –≤ –≥–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Ç–æ–∫–æ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–æ–∏—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–ø—Ä—è–∂—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
                        cp.append(self.StreamPriorMatrix[job_id])

                        # H3
                        cphi1 = []
                        # H4
                        cphi2 = []
                        # H5
                        cphi3 = []
                        # H6
                        cpv1 = []
                        # H7
                        cpv2 = []
                # /PAVLOV: 3.1.2 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –≤ H2 –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞)

                if DEBUG_L1:
                    print(cp)

                # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–¥–∞ c*x + cp*xp - –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω
                prob += lpDot(x, c) + lpDot(xp, cp), r"–ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω"

                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                b = []
                # —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ b, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã —É —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–∑ —Ñ—Ä–æ–Ω—Ç–∞
                
                # PAVLOV: 2.1.7 (1)
                for (j, op_id) in enumerate(OpFront):
                    # x + x + x + x + x + x + x + x + x + x + x + x
                    # |_______| - —Ñ—Ä–æ–Ω—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
                    # 1 + 1 + 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 <= 1 - –æ–ø–µ—Ä–∞—Ü–∏—è ‚Ññ1
                    # 0 + 0 + 0 + 1 + 1 + 1 + 0 + 0 + 0 + 0 + 0 + 0 <= 1 - –æ–ø–µ—Ä–∞—Ü–∏—è ‚Ññ2 –∏ —Ç.–¥.
                    del b[:]
                    for i in range(0, j * len(ResFront)): b.append(0)
                    for i in range(j * len(ResFront), (j + 1) * len(ResFront)): b.append(1)
                    for i in range((j + 1) * len(ResFront), len(OpFront) * len(ResFront)): b.append(0)
                    op = self.get_proc_op(op_id)[1]
                    # —Å—É–º–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º –Ω–µ –±–æ–ª–µ–µ 1
                    prob += lpDot(x, b) <= 1, r"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ " + op.Name + "_" + str(op.ID)  
                # /PAVLOV: 2.1.7 (1)

                # PAVLOV: 2.1.7. (2)
                for (j, res_id) in enumerate(ResFront):
                    del b[:]
                    for k in range(len(OpFront)):
                        for ri in range(0, j):
                            b.append(0)
                        b.append(1)
                        for ri in range(j + 2, len(ResFront) + 1):
                            b.append(0)

                    res = self.get_clust_res(res_id)[1]
                    # —Å—É–º–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –±–æ–ª–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    prob += lpDot(x, b) <= res.MaxThreads, r"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞ " + res.Name + "_" + str(res.ID)

                    # —Å—É–º–º–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ –±–æ–ª–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                    prob += lpDot(xp, b) <= res.MaxIntense, r"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞ " + res.Name + "_" + str(res.ID)
                # /PAVLOV: 2.1.7. (2)

                # PAVLOV: –∑–¥–µ—Å—å –ü–°–ê —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –∞–Ω–∞–ª–æ–≥ —Ñ–æ—Ä–º—É–ª (2.1.8 ‚Äì 2.1.11)
                for constrx, constrxp in zip(x, xp):
                    prob += constrxp - constrxp.upBound * constrx <= 0, r"–ó–∞–ø—Ä–µ—Ç –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ " + constrxp.name + \
                            r" –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è " + constrx.name

                for (j, op_id) in enumerate(OpFront):
                    proc = self.get_proc_op(op_id)[0]
                    del b[:]
                    # –∑–∞–ø–æ–ª–Ω–∏–º –Ω—É–ª—è–º–∏ –≤–µ–∫—Ç–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                    for i in range(0, len(OpFront) * len(ResFront)):
                        b.append(0)

                    for p in proc.graph.predecessors(op_id):  # –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏

                        if len(list(proc.graph.successors(
                            p))) <= 1: continue  # –µ—Å–ª–∏ –Ω–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–≤–µ–π, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–±–æ—Ä

                        for s in proc.graph.successors(p):  # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –ø—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–µ—Ç–≤–µ–π

                            if proc.graph.edges[p, s]['fwd'] == proc.graph.edges[p, op_id]["fwd"]:
                                # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ 'fwd' —Å–æ—Å–µ–¥–Ω–µ–π –¥—É–≥–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 'fwd' —Ç–µ–∫—É—â–µ–π –¥—É–≥–∏
                                if s != op_id and proc.get_op(s).X != 0:  # –µ—Å–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–≤—å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É
                                    for k, res in enumerate(ResFront):
                                        prob += x[j * len(ResFront) + k] <= 0, r"–ó–∞–ø—Ä–µ—Ç –∑–∞–ø—É—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ " + \
                                                x[j * len(ResFront) + k].name + r", –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–ª–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ç–≤—å"

                                if s not in OpFront:
                                    continue

                                alt_id = OpFront.index(s)
                                for i in range(alt_id * len(ResFront), (alt_id + 1) * len(ResFront)):
                                    b[
                                        i] = 1  # –≤—ã—Å—Ç–∞–≤–∏–º –µ–¥–∏–Ω–∏—Ü—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ)

                    if 1 in b:
                        prob += lpDot(x, b) <= 1, r"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –ò–õ–ò " + str(op_id)

                # /PAVLOV: –∑–¥–µ—Å—å –ü–°–ê —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –∞–Ω–∞–ª–æ–≥ —Ñ–æ—Ä–º—É–ª (2.1.8 ‚Äì 2.1.11)

                if WRITE_FILE:
                    # –∑–∞–ø–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã
                    prob.writeLP("test3.lp" + str(self.iteration))
                    # print prob.variables()

                # Solve the problem using the default solver
                solver = pulp.PULP_CBC_CMD(keepFiles=True, msg=False)
                #solver.tmpDir = 'TMP'
                prob.solve(solver)

                if DEBUG:
                    if LpStatus[prob.status] != 'Optimal':
                        print("–ù–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", LpStatus[prob.status])
                    else:
                        print("–ù–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", LpStatus[prob.status])

                if WRITE_FILE:
                    # Print the value of the objective

                    f = open('test2.lp' + str(self.iteration), "w")
                    for v in prob.variables():
                        # if v.varValue != 0:
                        f.write(str(v.name) + " -> " + str(v.varValue) + "\r\n")
                        # print v.name, "=", v.varValue
                    f.close()

                # v = iter(prob.variables())  # –∏–∑—ä—è—Ç–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–µ—à–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ control

                # PuLP is silly and sorts the variables by name before returning them,
                # so we need to re-sort them in numerical order.

                solution = [s.varValue for s in sorted(prob.variables(), key=lambda v: int(v.name.split('_')[1]))]
                #from pprint import pprint
                #print(solution)
                
                # PAVLOV CODE
                #self.Priorities_all = {}
                i = 0
                for job_id in OpFront:
                    for res_id in ResFront:
                        if solution[i]: self.Priorities_all[job_id] = c[i]
                        i += 1
                #print(self.Priorities_all)
                
                # PAVLOV /CODE

                # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                # uList = iter(control)
                # upList = iter(streamcontrol)
                ucntr = 0  # —Å—á—ë—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                uList = iter(solution)
                for job_id in OpFront:
                    for res_id in ResFront:
                        try:
                            u = next(uList)
                            up = next(uList)
                            if u == float("1.0"):  # –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ SOLVER —Ä–∞–≤–Ω–∞ –µ–¥–∏–Ω–∏—Ü–µ
                                ucntr += 1
                                res = self.get_clust_res(res_id)[1]
                                op = self.get_proc_op(job_id)[1]

                                # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
                                interrupted_operations = resource_owner(time - 1, res.ID)
                                interruption_flag = False

                                old_res = self.get_clust_res(self.timetable[-1].get((time - 1, op.ID), (-1, -1))[0])

                                # –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ –ò —Ä–∞–Ω–µ–µ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
                                # –ò –Ω–∞ –¥—Ä—É–≥–æ–º —Ä–µ—Å—É—Ä—Å–µ - –æ–ø–µ—Ä–∞—Ü–∏—è —Å–∫–∞—á–µ—Ç –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
                                if res.test_load(op, up) != RES_REJECTED and op.X != 0 and old_res and \
                                        self.timetable[-1].get((time - 1, op.ID), (-1, -1))[0] != res_id:
                                    old_res = old_res[1]
                                    h1 = self.OpPriorMatrix[job_id] + \
                                         self.ResPriorMatrix[res_id] + \
                                         self.penalty.get(job_id, (0, 0, 0))[2]

                                    h2 = self.OpPriorMatrix[job_id] + \
                                         self.ResPriorMatrix[old_res.ID] + \
                                         self.penalty.get(job_id, (0, 0, 0))[2]

                                    if DEBUG_INTERRUPT:
                                        print('‚ùé –ù–∞–º–µ—á–∞–µ—Ç—Å—è —Ä–∞–∑—Ä—ã–≤', op.Name, '–ø–æ —Ä–µ—Å—É—Ä—Å—É')
                                        if h1 == h2:
                                            print('–ú–æ–∂–Ω–æ –±—ã –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞—Ç—å')
                                            if old_res.test_load(op, up) == RES_REJECTED:
                                                print('–ù–æ –Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º —Ä–µ—Å—É—Ä—Å–µ —É–∂–µ –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å–∫–∞—Ç—å')

                                    # continue
# –°–õ–£–ß–ê–ô–ù–û –û–ü–†–ï–î–ï–õ–Ø–Æ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï (–ó–ê–ü–†–ï–¢ –ü–†–ï–†–´–í–ê–ù–ò–Ø) (??)
                                if DEBUG_L1 and up == 0:
                                    print("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ —Å –Ω—É–ª–µ–≤–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é", op.Name, op.ID, res.Name, res.ID)

                                load_result = res.load_operation(op, up)  # –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å
                                if load_result != RES_REJECTED:  # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–µ –æ—Ç–∫–ª–æ–Ω–∏–ª
                                    log_timetable(time, job_id, res_id, up)  # –≤–Ω–µ—Å–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ


                                    if self.logger and load_result:
                                        self.logger.put({
                                            "message": '–û–ø–µ—Ä–∞—Ü–∏—è {} - {}'.format(job_id, load_result),
                                            "variables": {
                                                "operation": {
                                                    "id": job_id,
                                                    "template_id": op.template_id,
                                                    "process": self.get_proc_op(job_id)[0].ID,
                                                    "status": load_result,
                                                    "name": op.Name
                                                }
                                            }
                                        })

                                    if DEBUG_EXEC:
                                        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", op.Name, "u‚Åø", up, op.X, '->', op.A,
                                              op.XP, '->', op.AP, '@', res.Name)
                                else:
                                    if DEBUG_EXEC:
                                        print("–†–µ—Å—É—Ä—Å", res.Name, "–æ—Ç–∫–∞–∑–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", op.Name)
                        except StopIteration:
                            break


                if not ucntr:
                    if DEBUG_EXEC:
                        print("–£–ø—Ä–∞–≤–ª–µ–Ω–µ –Ω–µ –≤–∫–ª—é—á–∞–ª–æ—Å—å")

                if DEBUG_EXEC:
                    print("–ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω:", value(prob.objective))

                if self.logger and not (time % HAMILTONIAN_THINNING):
                    self.logger.put({
                        "message": 'H = {} - –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω'.format(value(prob.objective),),
                        "variables": {
                            "hamiltonian": [self.time, value(prob.objective)]
                        }

                    })

            # –†–∞–∑—Ä—ã–≤—ã –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ —Ä–∞–±–æ—Ç

            # –æ—Ü–µ–Ω–∏–º —Ä–∞–∑—Ä—ã–≤—ã
            for proc, op in self.op_iter():
                # op = self.get_proc_op(job_id)[1]

                # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –±—ã–ª–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ, –∞ —Ç–µ–ø–µ—Ä—å –µ—ë –Ω–µ—Ç
                # if op.X != 0 and \
                #         ((op.XP != op.AP and
                #         (time - 1, op.ID) in self.timetable[-1] and
                #         (time, op.ID) not in self.timetable[-1]) or
                #         ((time, op.ID) in self.timetable[-1] and
                #             (time - 1, op.ID) in self.timetable[-1] and (time, op.ID) in self.timetable[-1] and
                #             self.timetable[-1].get((time - 1, op.ID), (-1, -1))[0] !=
                #             self.timetable[-1].get((time, op.ID), (-1, -1))[0])
                #         ):
                interruption_type = 0

                # Pavlov TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏
                # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
                # (—á–µ—Ä–µ–∑ status?)
                # –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å –∏ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
                if op.Status == OP_EXEC:
                #if op.X != 0 and op.XP != op.AP:
                    # –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –ø—Ä–æ–ø–∞–ª–∞
                    if (time - 1, op.ID) in self.timetable[-1] and (time, op.ID) not in self.timetable[-1]:
                        interruption_type = 1  # –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞, –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏
                        if DEBUG_INTERRUPT:
                            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è", op.Name, "–ø—Ä–æ–ø–∞–ª–∞ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                if op.X != 0 and (time, op.ID) in self.timetable[-1]:
                    if ((time, op.ID) in self.timetable[-1]) and ((time - 1, op.ID) in self.timetable[-1]):
                        int_old_res_id = self.timetable[-1].get((time - 1, op.ID))[0]
                        int_new_res_id = self.timetable[-1].get((time, op.ID))[0]
                        if int_old_res_id != int_new_res_id:
                            interruption_type = 2  # –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–∏–ø–∞, –ø–µ—Ä–µ–±—Ä–æ—Å —Ä–µ—Å—É—Ä—Å–∞
                            if DEBUG_INTERRUPT:
                                print("üåÄÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è", op.Name, "—Å–º–µ–Ω–∏–ª–∞ —Ä–µ—Å—É—Ä—Å",
                                      self.timetable[-1].get((time - 1, op.ID))[0], "->",
                                      self.timetable[-1].get((time, op.ID))[0])
                if interruption_type != 0:
                    self.conflict_count += 1
                    if not options.get('relaxed'):
                        # –æ–ø—Ä–µ–¥–µ–ª–∏–º, –∫—Ç–æ –æ–±—Å–ª—É–∂–∏–≤–∞–ª –æ–ø–µ—Ä–∞—Ü–∏—é
                        res = self.timetable[-1][(time - 1, op.ID)][0]
                        # —Ä–µ—Å—É—Ä—Å –º–æ–≥ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –≤—ã–±–µ—Ä–µ–º —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∞–ª–∞—Å—å —Ä–∞–Ω—å—à–µ
                        interrupted = min(resource_owner(time - 1, res), key=lambda t: t[0])
                        # –≤—ã—è—Å–Ω–∏–º, –∫—Ç–æ –ø—Ä–µ—Ä–≤–∞–ª –æ–ø–µ—Ä–∞—Ü–∏—é
                        if (len(resource_owner(time, res)) > 0):
                            interruptor = min(resource_owner(time, res), key=lambda t: t[0])
                            if not SIMPLE_DECISION:
                                if DEBUG_INTERRUPT:
                                    print("\t", self.get_proc_op(interruptor[1])[1].Name, "–≤—ã—Ç–µ—Å–Ω—è—é—Ç", op.Name)
                                    print("\t–≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Å—É—Ä—Å–∞", self.get_clust_res(res)[1].ID, "–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ -",
                                          [self.get_proc_op(rsn[1])[1].Name for rsn in resource_owner(time - 1, res)])

                                    print("")
                                    print("v" * 30, "–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1", "v" * 30)
                                dyn_clone_1 = clone_model(self)
                                # dyn_clone_1.execute_plan(0, interrupted[0] - 1)
                                if DEBUG_INTERRUPT:
                                    print("–ó–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", self.get_proc_op(interrupted[1])[1].Name, "c",
                                          interrupted[0], "–¥–æ", time + 1)
                                dyn_clone_1.reset_executed(clear_restrictions=False)
                                dyn_clone_1.set_restriction(interrupted[1], interrupted[0], time + 1)
                                if DEBUG_INTERRUPT:
                                    print("–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", dyn_clone_1.restriction)
                                dyn_clone_1.calculate_plan(dict(method="PULP", relaxed=True, debug_tab=debug_tab+1))
                                # dyn_clone_1.calculate_plan(dict(method="FIFO", relaxed=True))
                                conflicts1 = dyn_clone_1.QltList['J0'][-1]
                                del dyn_clone_1
                                if DEBUG_INTERRUPT:
                                    print("^" * 30, "  –û–∫–æ–Ω—á–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1 ", "^" * 30)

                                    print("")
                                    print("v" * 30, "–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2", "v" * 30)
                                dyn_clone_1 = clone_model(self)
                                # dyn_clone_1.execute_plan(0, interrupted[0] - 1)
                                dyn_clone_1.reset_executed(clear_restrictions=False)
                                if DEBUG_INTERRUPT:
                                    print("–ó–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", self.get_proc_op(interruptor[1])[1].Name, "c", time,
                                          "–¥–æ", time + 1)
                                dyn_clone_1.set_restriction(interruptor[1], time, time + 1)
                                if DEBUG_INTERRUPT:
                                    print("–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", dyn_clone_1.restriction)
                                # dyn_clone_1.calculate_plan(dict(method="FIFO", relaxed=True))
                                dyn_clone_1.calculate_plan(dict(method="PULP", relaxed=True, debug_tab=debug_tab+1))
                                conflicts2 = dyn_clone_1.QltList['J0'][-1]
                                del dyn_clone_1
                                if DEBUG_INTERRUPT:
                                    print("^" * 30, "  –û–∫–æ–Ω—á–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 2 ", "^" * 30)

                                #conf_res = 1 if conflicts1 < conflicts2 \
                                #    else (2 if conflicts1 > conflicts2 else randrange(1, 2))

                                if conflicts1 < conflicts2:
                                    if DEBUG_INTERRUPT:
                                        print(conflicts1, "<", conflicts2)
                                        print("–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –º–µ–Ω–µ–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π: –∑–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                                              self.get_proc_op(interrupted[1])[1].Name, "c",
                                              interrupted[0], "–¥–æ", time + 1)
                                    self.set_restriction(interrupted[1], interrupted[0], time)
                                else:
                                    if DEBUG_INTERRUPT:
                                        print(conflicts1, ">", conflicts2)
                                        print("–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –º–µ–Ω–µ–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π: –∑–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                                              self.get_proc_op(interruptor[1])[1].Name, "c", time,
                                              "–¥–æ", time + 1)
                                    self.set_restriction(interruptor[1], time, time + 1)
                            else:
                                # –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ
                                self.set_restriction(interruptor[1], time, time + 1) if randrange(0, 10) > 5 \
                                    else self.set_restriction(interrupted[1], interrupted[0], time)
                        else:
                            # –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–ª
                            if interruption_type == 1:
                                pass
                            elif interruption_type == 2:
                                old_res_id = self.timetable[-1].get((time - 1, op.ID))[0]
                                new_res_id = self.timetable[-1].get((time, op.ID))[0]
                                h1 = self.OpPriorMatrix[op.ID] + \
                                     self.ResPriorMatrix[old_res_id] + \
                                     self.penalty.get(op.ID, (0, 0, 0))[2]

                                h2 = self.OpPriorMatrix[op.ID] + \
                                     self.ResPriorMatrix[new_res_id] + \
                                     self.penalty.get(op.ID, (0, 0, 0))[2]

                                if h1 == h2:
                                    if DEBUG_INTERRUPT:
                                        print('–ú–æ–∂–Ω–æ –±—ã –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞—Ç—å')
                                    if self.get_clust_res(old_res_id)[1].test_load(op) == RES_REJECTED:
                                        if DEBUG_INTERRUPT:
                                            print('–ù–æ –Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º —Ä–µ—Å—É—Ä—Å–µ —É–∂–µ –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å–∫–∞—Ç—å')
                                elif h1 < h2:
                                    if DEBUG_INTERRUPT:
                                        print('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞')

                            if DEBUG_INTERRUPT:
                                print("–†–∞–∑—Ä—ã–≤ –∏–∑-–∑–∞ –∑–æ–Ω—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞")
                                print("–ó–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", self.get_proc_op(interrupted[1])[1].Name,
                                      "c", interrupted[0], "–¥–æ", time + 1)
                            self.set_restriction(interrupted[1], interrupted[0], time)

                        # –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω –Ω–∞–¥–æ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É time - 1
                        if DEBUG_INTERRUPT:
                            print("–û—Ç–∫–∞—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ -> ", interrupted[0])

                        self.reset_executed(clear_timetable=False,
                                            clear_restrictions=False)  # —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
                        self.OpPriorMatrix = self.operation_init_conditions.copy()
                        self.StreamPriorMatrix = self.stream_init_conditions.copy()
                        self.ResPriorMatrix = self.resource_init_conditions.copy()
                        #self.normalize_left()
                        self.integrate(0, interrupted[0] - 1, {'method': 'EXEC'})
                        self.time = interrupted[0] - 1

                        if DEBUG_INTERRUPT:
                            print("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:", self.time)
                            print("–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", self.restriction)
                        return


        def log_timetable(time, job_id, res_id, intens):
            """–ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.
            :param time: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            :param job_id: –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            :param res_id: –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ä–µ—Å—É—Ä—Å
            :param intens: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            """
            self.timetable[-1][(time, job_id)] = (res_id, intens)

        def resource_owner(check_time, resource_id):
            """–ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç —Ä–µ—Å—É—Ä—Å
            :param check_time: –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞
            :param resource_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–Ω—è—Ç–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
            :return: –∫–æ—Ä—Ç–µ–∂ (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, id –æ–ø–µ—Ä–∞—Ü–∏–∏)
            """
            execution_row = list()
            if len(self.timetable[-1]) != 0:
                # a = {j:k for j,k in self.timetable[-1] if j[0] == check_time}.keys()[[i[0] for i in self.timetable[-1].values()].index(resource_id)]
                execution_point = [(j, k) for (j, k), (l, m) in self.timetable[-1].items()
                                   if (l == resource_id) and (j == check_time)]

                for ep in execution_point:
                    execution_dict = {j: k for (j, k), (l, m) in self.timetable[-1].items()
                                      if (l == resource_id) and (k == ep[1])}
                    start_time = min(execution_dict)  # , key=execution_row.get)

                    execution_row.append((start_time, execution_dict[start_time]))

            return execution_row

        def operation_start(operation_id):
            """–ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            :param operation_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
            :return: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            start_time = None
            if len(self.timetable[-1]) != 0:
                # a = {j:k for j,k in self.timetable[-1] if j[0] == check_time}.keys()[[i[0] for i in self.timetable[-1].values()].index(resource_id)]

                # –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                execution_dict = [j for (j, k) in self.timetable[-1] if k == operation_id]
                start_time = min(execution_dict)  # , key=execution_row.get)

            return start_time

        if DEBUG:
            print("–°—Ç–∞—Ä—Ç")
        t1 = time()

        ##################################
        #								 #
        #  –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è	 #
        #								 #
        ##################################

        if self.p: self.p.send("INF: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç " + str(ts) + " –¥–æ " + str(tf) + " (" + method + ")")
        if tf <= ts:
            return

        # –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.time = ts
        # –í–Ω–∏–º–∞–Ω–∏–µ! self.time –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Ä–µ—à–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Ä–∞–∑—Ä—ã–≤–æ–≤

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        if DEBUG_CTRL:
            # –æ–ø–µ—Ä–∞—Ü–∏–∏
            self.ograph = {n[1].ID: list() for n in self.op_iter()}
            # –ø–æ—Ç–æ–∫–∏
            self.pgraph = {n[1].ID: list() for n in self.op_iter()}
            # –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            self.work = {n[1].ID: list() for n in self.op_iter()}

            print("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç " + str(ts) + " –¥–æ " + str(tf) + " (" + method + ")")

        # –≤ —Å–ø–∏—Å–∫–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –≥–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–µ
        # PAVLOV: 3.1.1 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ H1 –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞)
        global index_ham
        global ham_file
        global csv_data
        csv_data = [['time', 'Job','Res','C','solution']]

        empty_loops = 0 # –ø–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ —Å –ø—É—Å—Ç—ã–º —Ñ—Ä–æ–Ω—Ç–æ–º —Ä–∞–±–æ—Ç
        while self.time <= tf:  # –ø—Ä–æ—Ö–æ–¥ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
            
            # PAVLOV: –ø–ª–æ—Ö–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–æ—Ä—å–±—ã —Å –±–∏–µ–Ω–∏—è–º–∏
            # TODO –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –∏–∑-–∑–∞ –±–∏–µ–Ω–∏–π
            # if empty_loops > tf: break

            #input('–ó–∞–¥–µ—Ä–∂–∫–∞...')
            # while self.time <= min(tf, self.D):  # –ø—Ä–æ—Ö–æ–¥ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
            # all_done = False
            # while not all_done:  # –ø—Ä–æ—Ö–æ–¥ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
            if DEBUG_L1:
                print()
                print("–í—Ä–µ–º—è:", self.time)
            # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–∞–±–æ—Ç
            MakeOpFront(self.time)
            # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            MakeResFront(self.time)
            #print(OpFront)
            # PAVLOV: –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞–∫–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∫–Ω–∞
            if not OpFront:
                #print(OpFront)
                windows = []
                for v in self.availability.values():
                    windows += [vv[0] for vv in v if vv[0] > self.time]
                #print(self.time, windows)
                if windows:
                    print('–ü—É—Å—Ç–æ–π —Ñ—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç –Ω–∞', self.time, '-> –ø—Ä—ã–≥–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–∫–Ω—É ', min(windows) - 1)
                    self.time = min(windows) - 1 # –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –æ–∫–Ω–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ñ—Ä–æ–Ω—Ç–µ —Ä–∞–±–æ—Ç
                    #print(self.availability)
                    print(windows)
                    # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–∞–±–æ—Ç
                    MakeOpFront(self.time)
                    # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
                    MakeResFront(self.time)
                    input()

            # –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã - –≥–ª–∞–≤–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å
            if method == "PULP":
                SolverPULP(self.time)
            elif method == "LIFO":
                SolverLIFO(self.time)
            elif method == "NONE":
                SolverNone(self.time)
            elif method == "EXEC":
                SolverExec(self.time)
            else:
                SolverFIFO(self.time)

            self.calculate_priorities()

            # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            procs_completed = 0
            for prc in self.ProcList.values():
                # –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                for nd in prc.graph.nodes():
                    if len(list(prc.graph.successors(nd))) == 0:
                        if prc.get_op(nd).Status in [STREAM_COMPLETED, FULL_COMPLETED]:
                            procs_completed = procs_completed + 1
                            if DEBUG_L1:
                                print("–ó–∞–≤–µ—Ä—à–∏–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å", prc.Name)

            if method not in ['EXEC', 'NONE']:
                if len(self.ProcList) <= procs_completed:   # —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –¥.–±. "==", —Ä–∞—Å—á–µ—Ç procs_completed?
                    # all_done = True
                    tf = self.time
                    print("\t"*debug_tab, "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞", tf)
                else:
                    if empty_loops > 3000:
                        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π. –ü—Ä–µ—Ä—ã–≤–∞–µ–º")
                        tf = self.time
                    else:
                        tf = self.time + 10
                        #self.availability = {}   # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é
                        #print('–ü—É—Å—Ç–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è. –£–±–∏—Ä–∞–µ–º –æ–∫–Ω–∞')
                        #tf = self.time*2    # PAVLOV: –ø—ã—Ç–∞–µ–º—Å—è –Ω–µ–ª–∏–Ω–µ–π–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –º–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π, –∫–æ–≥–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            #self.time += self.Step
            if not OpFront:
                #print(OpFront)
                windows = []
                for v in self.availability.values():
                    windows += [vv[0] for vv in v if vv[0] > self.time]
                #print(self.time, windows)
                if windows:
                    print('–ü—É—Å—Ç–æ–π —Ñ—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç –Ω–∞', self.time, '-> –ø—Ä—ã–≥–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–∫–Ω—É ', min(windows) - 1)
                    self.time = min(windows) - 1 # –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –æ–∫–Ω–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ñ—Ä–æ–Ω—Ç–µ —Ä–∞–±–æ—Ç
                    #print(self.availability)
                    print(windows)
                    # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–∞–±–æ—Ç
                    MakeOpFront(self.time)
                    # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
                    MakeResFront(self.time)
                    input()
            empty_loops += 1  # —Å—á–∏—Ç–∞–µ–º —Ü–∏–∫–ª—ã, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è

        
        self.D = self.time


        # /PAVLOV: 3.1.1 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ H1 –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞)
        i = 0
        for time_time,job_id in self.timetable[-1].keys():
            res_id = self.timetable[-1][(time_time,job_id)][0]
            csv_data.append([time_time, self.get_proc_op(job_id)[1].Name + '(' + str(job_id) + ')', self.get_clust_res(res_id)[1].Name + '(' + str(res_id) + ')', str(self.Priorities_all.get(job_id, 0)).replace('.',','), str(int(1 if (time_time, job_id) in self.timetable[-1] else 0 ))])
            # self.penalty.get(job_id, (0,0,0))[2])
            i += 1
        # /PAVLOV: 3.1.1 (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ H1 –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞)
        index_ham += 1
        ham_file = open(os.path.join(dir_name, 'hamiltonian_' + str(index_ham) + '.csv'), 'w', newline='\n')
        writer = csv.writer(ham_file, dialect='excel', delimiter=';')
        writer.writerows(csv_data)
        ham_file.close()

        if DEBUG_L2:
            print('*' * 10, 'fwd psi o')
            for ogi, ogv in self.ograph.items():
                print(self.get_proc_op(ogi)[1].Name, ogv)
            print()
            print('*' * 10, 'fwd psi p')
            for pgi, pgv in self.pgraph.items():
                print(self.get_proc_op(pgi)[1].Name, pgv)
            print()
        if DEBUG_CTRL:
            print('*' * 10, method, 'fwd u')

            for mt in range(0, int(self.D) + 1):
                sys.stdout.write(str(mt).zfill(2))

            print()

            for op, g in sorted(self.work.items(), key=lambda k: k[0]):
                if bool(set(g) & set(['1', '2', '3'])):
                    for p in g:
                        print(p, end=' ')

                    print(self.get_proc_op(op)[1].Name, "[" + self.get_proc_op(op)[1].ID + "]")

        t2 = time()
        if DEBUG:
            print("–†–∞—Å—á—ë—Ç –∑–∞–Ω—è–ª", round(t2 - t1, 3), "—Å–µ–∫")
        if self.p:
            self.p.send("INF: –†–∞—Å—á—ë—Ç –∑–∞–Ω—è–ª " + str(round(t2 - t1, 3)))


    def Assess(self, e=1):
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–ª–∞–Ω–∞. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±–æ–±—â—ë–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ e, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.01.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–æ–≤–ø–∞–ª–∏ –∏ False, –µ—Å–ª–∏ –Ω–µ—Ç –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è."""

        # self.QltList[0] - —ç—Ç–æ –û–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞

        if DEBUG_Q:
            print("–†–∞—Å—á—ë—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞")

        # J1 –∏ J2
        residual = 0  # "–ù–µ–≤—è–∑–∫–∞" - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ–ø–æ–ª–Ω–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        residual_p = 0  # "–ù–µ–≤—è–∑–∫–∞" - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ–ø–æ–ª–Ω–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞

        gantt_list = list()

        def add_scsr(gnt, proc, op_id):
            """
            –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –Ω–µ–≤—è–∑–æ–∫ –ø–æ –≤—ã–ø–æ–ª–Ω—è–≤—à–∏–º—Å—è –≤–µ—Ç–≤—è–º –≥—Ä–∞—Ñ–∞
            :param gnt: —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —É–∂–µ —É—á—Ç—ë–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            :param proc: –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç—Ä–æ–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫
            :param op_id: —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞
            :return: (–æ—Å–Ω–æ–≤–Ω–∞—è –Ω–µ–≤—è–∑–∫–∞, –ø–æ—Ç–æ–∫–æ–≤–∞—è –Ω–µ–≤—è–∑–∫–∞)
            """
            proc_residual = 0
            proc_residual_p = 0
            op = proc.get_op(op_id)
            # –∑–∞–ø–∏—Å—å —Ä–∞–±–æ—Ç –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É—á—ë—Ç–∞
            if not (proc, op) in gnt:
                gnt.append((proc, op))
                # if proc.graph.edge[op_id][scsr]['fwd']
                proc_residual += (op.A - op.X) ** 2
                proc_residual_p += (op.AP - op.XP) ** 2
                # if PRINT:
                #     print('\t\tAppend', proc.ID, op.ID, "J =", proc_residual, "Jp =", proc_residual_p)

            # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ –æ–±—Ö–æ–¥–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–µ—Ç–≤–∏
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º fwd –¥—É–≥–∏, –∏–¥—É—â–∏–µ –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º
            logic = dict((key, [{gr[1]: (proc.get_op(gr[1]).A - proc.get_op(gr[1]).X)} for gr
                                in g]) for (key, g) in groupby(sorted((val, key) for (key, val) in
                                                                      {p: proc.graph.edges[op_id, p]['fwd'] for p
                                                                       in proc.graph.successors(
                                                                          op_id)}.items()), lambda x: x[0]))
            # –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –±–µ–∑–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å.
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –æ–¥–Ω–æ–π –∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–µ—Ç–≤–µ–π –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è - –Ω–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –µ–≥–æ –∏ –≤—Å—é –µ–≥–æ –≤–µ—Ç–≤—å.
            # todo –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤—Å–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å (–æ–±—Ä—ã–≤ –ø–æ –∫–æ–Ω—Ü—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä)
            alt_scsr = map(lambda x: x[0], filter(lambda x: len(x) > 0, [[list(i2)[0] for i2 in i if (((len(i) == 1) or
                                                                                                       ((list(
                                                                                                           i2.values())[
                                                                                                             0] == 0) and (
                                                                                                                    len(
                                                                                                                        i) > 1))))]
                                                                         for i in logic.values()]))
            # alt_scsr = [[list(i2)[0] for i2 in i if (((len(i) == 1) or
            #                                           ((list(i2.values())[0] == 0) and (len(i) > 1))))][0]
            #             for i in logic.values()]
            # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
            for scsr in alt_scsr:
                # for scsr in proc.graph.successors_iter(op_id):
                scsr_op = proc.get_op(scsr)

                # if ((len(proc.graph.successors(op_id)) > 1) and (scsr_op.A - scsr_op.X == 0)) or \
                #         (len(proc.graph.successors(op_id)) < 2):
                residual_tuple = add_scsr(gnt, proc, scsr)
                proc_residual += residual_tuple[0]
                proc_residual_p += residual_tuple[1]

            return proc_residual, proc_residual_p

        ways_cntr = 0
        for proc in self.ProcList.values():
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —É–∑–ª—ã
            # todo: replace with MultiDiGraph.in_edges_iter([nbunch, data, keys])
            start_nodes = list()
            end_nodes = list()
            for node in proc.graph.nodes():
                if sum(1 for _ in proc.graph.predecessors(node)) == 0:
                    start_nodes.append(node)
                if sum(1 for _ in proc.graph.successors(node)) == 0:
                    end_nodes.append(node)

            # –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–≤—à–∏—Ö—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π
            for start_node in start_nodes:
                residual_tuple = add_scsr(gantt_list, proc, start_node)
                residual += residual_tuple[0]
                residual_p += residual_tuple[1]

            for sn in start_nodes:
                for en in end_nodes:
                    ways_cntr += len(list(nx.all_simple_paths(proc.graph, sn, en)))

        if DEBUG_GRAPH:
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤", proc.graph.number_of_nodes())
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ë–±–µ—Ä", proc.graph.number_of_edges())
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π", ways_cntr)

        self.QltList["J1"].append(residual / 2)
        if self.p:
            self.p.send("INF: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ–ø–æ–ª–Ω–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π: " + str(self.QltList["J1"][-1]))
        if DEBUG_Q:
            if self.QltList["J1"][0] > 0:
                print("J1 = ", self.QltList["J1"][-1], "\t–Ω–µ–≤—è–∑–∫–∞ –ø–æ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏")

        self.QltList["J2"].append(residual_p / 2)
        if self.p:
            self.p.send("INF: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ–ø–æ–ª–Ω–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞: " + str(self.QltList["J2"][-1]))
        if DEBUG_Q:
            if self.QltList["J2"][0] > 0:
                print("J2 = ", self.QltList["J2"][-1], "\t–Ω–µ–≤—è–∑–∫–∞ –ø–æ –ø–æ—Ç–æ–∫—É")

        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
        j3_sum = 0
        for sc_clust, sc_res in self.res_iter():
            j3_sum += sc_res.cost
        self.QltList["J3"].append(j3_sum)
        if DEBUG_Q:
            if self.QltList["J3"][0] > 0:
                print("J3 = ", self.QltList["J3"][-1], "\t—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ ( ‚úï", self.QltList["J3"][0], ")")
        if False and self.logger:
            if self.QltList["J3"][0] > 0 and len(self.QltList["J3"]) != 3:
                self.logger.put({
                    "message": 'J3 = {} —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ ( ‚úï {})'.format(self.QltList["J3"][-1],  self.QltList["J3"][0]),
                    "variables": {
                        "quality_j3": [len(self.QltList["J3"]) - 2, self.QltList["J3"][-1]]
                    }

                })


        # J4 –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤
        j4_sum = 0
        for j_proc, j_op in self.op_iter():
            j4_sum += self.penalty.get(j_op.ID, (0, 0, 0))[2]

        self.QltList["J4"].append(j4_sum)

        # J5 –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        Nonuniformity = 0
        for clust in self.ClustList.values():
            for res in clust.ResList.values():
                Nonuniformity += (self.D - res.Fatigue) ** 2

        self.QltList["J5"].append(Nonuniformity / 2)
        if self.p:
            self.p.send("INF: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: " + str(self.QltList["J5"][-1]))
        if PRINT:
            if self.QltList["J5"][0] > 0:
                print("J5 = ", self.QltList["J5"][-1], "\t–Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")

        # J7 - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞
        self.QltList["J7"].append(self.time - 1)
        if DEBUG_Q:
            if self.QltList["J7"][0] > 0:
                print("J7 = ", self.QltList["J7"][-1], "\t–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ ( ‚úï", self.QltList["J7"][0], ")")
        if False and self.logger:
            if self.QltList["J7"][0] > 0 and len(self.QltList["J7"]) != 3:
                self.logger.put({
                    "message": 'J7 = {} –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ ( ‚úï {})'.format(self.QltList["J7"][-1],
                                                                                   self.QltList["J7"][0]),
                    "variables": {
                        "quality_j7": [len(self.QltList["J7"]) - 2, self.QltList["J7"][-1]]
                    }

                })



        # J8
        self.QltList["J8"].append(0)
        # todo –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 0

        # J9
        self.QltList["J9"].append(0)

        # J0
        genQlt = 0  # –û–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
        for j, qlt in self.QltList.items():
            if j == "J0":
                continue
            genQlt += float(qlt[0] * qlt[
                -1])  # qlt[0] - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≤—ë—Ä—Ç–∫–∏, qlt[-1] - —á–∞—Å—Ç–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        self.QltList["J0"].append(genQlt)

        if self.p:
            self.p.send("INF: –û–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞")
        if DEBUG_Q:
            print("J0 = ", self.QltList["J0"][-1], "\t–æ–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞")
        if self.logger:
            if len(self.QltList["J0"]) != 3:
                self.logger.put({
                    "message": "J0 = {} –æ–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞".format(self.QltList["J0"][-1],),
                    "variables": {
                        "quality_j0": [len(self.QltList["J0"]) - 2, self.QltList["J0"][-1]],
                        "quality_j3": [len(self.QltList["J3"]) - 2, self.QltList["J3"][-1]],
                        "quality_j7": [len(self.QltList["J7"]) - 2, self.QltList["J7"][-1]]
                    }
                })

        # return (len(self.QltList["J0"]) >= 3 and abs(self.QltList["J0"][-1] - self.QltList["J0"][-2]) < e) or \
        return len(self.QltList["J0"]) > 6

        # –µ—Å–ª–∏ –Ω–µ–≤—è–∑–∫–∞ –æ–±–æ–±—â—ë–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ e –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
        # –∏ –Ω–µ —Å —á–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é

    def calculate_transversality(self):
        """–†–∞—Å—á—ë—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å–æ–ø—Ä—è–∂—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π."""

        if DEBUG_TRANS:
            print("\n–†–∞—Å—á—ë—Ç —É—Å–ª–æ–≤–∏–π —Ç—Ä–∞–Ω—Å–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏")

        if self.p: self.p.send("INF: –†–∞—Å—á—ë—Ç —É—Å–ª–æ–≤–∏–π —Ç—Ä–∞–Ω—Å–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏")

        # —Ä–∞—Å—á—ë—Ç –Ω–µ–≤—è–∑–æ–∫ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∏ –ø–æ—Ç–æ–∫–∞–º ùúì
        for tr_proc in self.ProcList.values():
            for tr_op in tr_proc.OpList.values():
                # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, —Ç–æ –æ–Ω–∞ –Ω–∞ –ª–∏–±–æ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤–µ—Ç–≤–∏,
                # –ª–∏–±–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–∞–∫ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —ç—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—è —Ñ–æ—Ä–º—É–ª–∞–º
                # if tr_op.X == 0 and tr_op.XP == 0:
                if True:  # –µ—Å–ª–∏ –º—ã –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ü–µ–Ω–∫—É –ø–æ–ª–Ω–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç–æ –∏ –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ç—Ä–∞–Ω—Å–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –µ—ë –Ω–µ—Ç
                    self.operation_conditions[tr_op.ID] = (self.D - tr_op.X)**2 * float(self.QltList['J7'][1]) + 2
                    self.stream_conditions[tr_op.ID] = (self.D - tr_op.XP)**2 * float(self.QltList['J7'][1]) + 2
                # else:
                #     self.operation_conditions[tr_op.ID] = (tr_op.A - tr_op.X) * float(self.QltList['J7'][1]) + 2
                #     self.stream_conditions[tr_op.ID] = (tr_op.AP - tr_op.XP) * float(self.QltList['J7'][1]) + 2
                    # –û–¢–ö–õ–Æ–ß–ï–ù–û:
                    # –Ω–µ–≤—è–∑–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≤—ë—Ä—Ç–∫–∏
                    # –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–≤–æ–π–∫–∞, —Ç–∞–∫ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω—É–ª–µ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
                    # (–Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—é –ì–∞–º–∏–ª—å—Ç–æ–Ω–∏–∞–Ω–∞)
                    # –Ω–µ –µ–¥–∏–Ω–∏—Ü–∞, –∞ –¥–≤–æ–π–∫–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–µ log 1 = 0,
                    # –æ–ø—è—Ç—å –ø–æ–ø–∞–¥–∞–µ–º –Ω–∞ –Ω—É–ª–µ–≤–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

                # –ø—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏ –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –ø—É—Ç—å
                # 2019-10-08 –í —É—Å–ª–æ–≤–∏—è —Ç—Ä–∞–Ω—Å–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–¥—É—Ç –∑–Ω–∞—á–µ–Ω–∏—è uv2 -
                # –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –¥–æ –∫–æ–Ω—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
                # —Å–º—ã—Å–ª –≤ —Ç–æ–º, —á—Ç–æ –±–æ–ª—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞—ë—Ç—Å—è —Ä–∞–±–æ—Ç–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ø–æ–∑–∂–µ –¥—Ä—É–≥–∏—Ö


        # —Ä–∞—Å—á—ë—Ç –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        # for clust in self.ClustList.values():
        #     for res in clust.ResList.values():
        #         self.resource_conditions[res.ID] = (self.D - res.Fatigue)  # * float(self.QltList[3][1]) + 2
        #         # –Ω–µ–≤—è–∑–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≤—ë—Ä—Ç–∫–∏

        # —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç
        for clust in self.ClustList.values():
            for res in clust.ResList.values():
                self.resource_conditions[res.ID] = res.Fatigue * res.price if res.price else 0
                # –Ω–µ–≤—è–∑–∫–∞ —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≤—ë—Ä—Ç–∫–∏
        max_cost = max(self.resource_conditions.items(), key=operator.itemgetter(1))[1]
        for clust in self.ClustList.values():
            for res in clust.ResList.values():
                self.resource_conditions[res.ID] = (max_cost - self.resource_conditions[res.ID]) * float(self.QltList['J3'][1]) + 2
                # self.resource_conditions[res.ID] = 50 - res.price  # trying just plain price instead of complex indicator
                    # (max_cost - self.resource_conditions[res.ID]) * float(
                    # self.QltList['J3'][1]) + 2

        self.OpPriorMatrix = self.operation_conditions.copy()
        self.StreamPriorMatrix = self.stream_conditions.copy()
        self.ResPriorMatrix = self.resource_conditions.copy()

        if self.p:
            self.p.send("INF: –†–∞—Å—á—ë—Ç —É—Å–ª–æ–≤–∏–π —Ç—Ä–∞–Ω—Å–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")

        if DEBUG_TRANS:
            print("\tùúì¬∫")
            for pop, popv in self.OpPriorMatrix.items():
                print("\t\t", self.get_proc_op(pop)[1].Name, popv)
            print("\tùúì‚Åø")
            for pop, popv in self.StreamPriorMatrix.items():
                print("\t\t", self.get_proc_op(pop)[1].Name, popv)
            print("\tùúì·¥æ", self.ResPriorMatrix)

        if DEBUG_TRANS:
            print("*" * 30, " –£—Å–ª–æ–≤–∏—è —Ç—Ä–∞–Ω—Å–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ ", "*" * 30)
            print(self.OpPriorMatrix)
            print(self.StreamPriorMatrix)

    def normalize_left(self):
        """
        –ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ —Å–æ–ø—Ä—è–∂—ë–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Ö –∏–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        :return: None
        """
        min_o = self.OpPriorMatrix[min(self.OpPriorMatrix, key=self.OpPriorMatrix.get)]
        if DEBUG_NORMALIZE:
            print("–ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –ø–æ", min_o)
        for i, v in self.OpPriorMatrix.items():
            self.OpPriorMatrix[i] = log10(v - min_o + 2) if NORMALIZE_LOG_OP else v - min_o + 1
            if DEBUG_NORMALIZE:
                print(self.OpPriorMatrix[i])

        min_p = self.StreamPriorMatrix[min(self.StreamPriorMatrix, key=self.StreamPriorMatrix.get)]
        if DEBUG_NORMALIZE:
            print("–ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –ø–æ", min_p)
        for i, v in self.StreamPriorMatrix.items():
            self.StreamPriorMatrix[i] = log10(v - min_p + 2) if NORMALIZE_LOG_ST else v - min_p + 1
            if DEBUG_NORMALIZE:
                print(self.StreamPriorMatrix[i])

    def reset_executed(self, clear_timetable=True, clear_restrictions=True):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ.
        :param clear_timetable: –æ—á–∏—â–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        :param clear_restrictions: –æ—á–∏—â–∞—Ç—å –∑–∞–ø—Ä–µ—Ç—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        """
        for proc in self.ProcList.values():
            for op in proc.OpList.values():
                op.reset()


                # —Å–±—Ä–æ—Å –≤—Ä–ï–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–µ—Ç–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                if clear_restrictions:
                    self.set_restriction(op.ID)
                    if DEBUG:
                        print("–°–±—Ä–æ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        for clust in self.ClustList.values():
            for res in clust.ResList.values():
                res.reset()

        if clear_timetable and len(self.timetable) > 0:
            self.timetable[-1].clear()

        for p in self.penalty:
            self.penalty[p] = (self.penalty[p][0], self.penalty[p][1], 0)

        self.debug_vars = {}

        if self.p:
            self.p.send("INF: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        if self.logger:
            self.logger.put({
                "message": '–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–ø–µ—Ä–∞—Ü–∏–π',
                "type": "command",
                "command": "reset_operations"
            })

    def reverse_integrate(self, tf=float('inf'), ts=0):
        """–ü–æ–ª–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞.
        :param tf: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +inf
        :param ts: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (tf > ts), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
        """

        if DEBUG_REV:
            print("\n–û–±—Ä–∞—Ç–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")

        if self.p:
            self.p.send("INF: –°—Ç–∞—Ä—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç " + str(tf) + " –¥–æ " + str(ts))

        ograph = {n[1].ID: list() for n in self.op_iter()}
        pgraph = {n[1].ID: list() for n in self.op_iter()}
        work = {n[1].ID: list() for n in self.op_iter()}

        self.time = min(tf, self.D)
        while self.time >= max(0, ts):
            if DEBUG_L1:
                print("\n–í—Ä–µ–º—è:", self.time)

            # –æ–±—Ä–∞—Ç–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å
            # psi_main = psi_main - (
            # + SUM_on_predecessors ( SUM_on_resources ( psi_main_predecessor * epsilon_resource * tetha_predecessor +
            # + psi_resource +
            # + psi_stream_predecessor * c_stream_predecessor_resource ) ) * u_main_predecessor +

            # + SUM_on_successor (SUM_on_resources ( psi_main_successor * epsilon_resource * tetha_successor +
            # + psi_resource +
            # + psi_stream_successor * c_stream_successor_resource ) ) * u_main_successor ) )

            hr_status = {
                0: "–∂–¥—ë—Ç –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                1: "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                2: "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                3: "–∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å—á–µ—Ä–ø–∞–Ω–æ",
                -1: "–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                -2: "—Å—Ç—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞"
            }

            for proc in self.ProcList.values():
                for n in proc.graph.nodes():

                    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–ø—Ä—è–∂—ë–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ p
                    job_status = self.get_proc_op(n)[1].Status

                    # –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–ª –æ–ø–µ—Ä–∞—Ü–∏—é
                    timeline_dict = {t_time: t_res_id for (t_time, t_op_id), (t_res_id, t_intense)
                                     in self.timetable[-1].items() if t_op_id == n}
                    if timeline_dict:
                        max_time = max(timeline_dict, key=timeline_dict.get)
                        last_res_id = self.timetable[-1].get((max_time, n), [-1])[0]
                    else:
                        last_res_id = None

                    if DEBUG_REV:
                        print("\t" + self.get_proc_op(n)[1].Name, "[" + hr_status[job_status] + "], ùúì¬∫",
                              self.OpPriorMatrix[n],
                              ", ùúì‚Åø", self.StreamPriorMatrix[n])
                        if last_res_id is not None:
                            print("\t\t–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å", last_res_id)

                    # last_res_id - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å

                    # –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–ø—Ä—è–∂—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏

                    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–ø—Ä—è–∂—ë–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ p

                    # summa = self.OpPriorMatrix.get(n, 0)
                    summa_pred = summa_parallel = 0
                    for pred_op_id in proc.graph.predecessors(n):
                        for (clust, res) in self.res_iter():
                            # —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                            sm = (1 if res.ID == self.timetable[-1].get((self.time, pred_op_id), (-1, -1))[0] else 0) * \
                                 (self.OpPriorMatrix[pred_op_id] +
                                  self.ResPriorMatrix[res.ID] +
                                  self.StreamPriorMatrix[pred_op_id] *
                                  self.get_productivity(pred_op_id, res.ID))
                            if DEBUG_REV and sm != 0:
                                print("\t\t–í–∫–ª–∞–¥ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ '", self.get_proc_op(pred_op_id)[1].Name,
                                      "' –≤ ùúì¬∫:", sm, ", –∏–∑ –Ω–∏—Ö")
                                print("\t\t\tùúì¬∫", self.OpPriorMatrix[pred_op_id])
                                print("\t\t\tùúì·¥æ", self.ResPriorMatrix[res.ID])
                                print("\t\t\tùúì‚Åø‚úïc", self.StreamPriorMatrix[pred_op_id] *
                                      self.get_productivity(pred_op_id, res.ID))
                            summa_pred += sm
                        # —É—á—ë—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–∏—Å–∫–ª—é—á–∞—é—â–µ–µ –∏–ª–∏)
                        for s in proc.graph.successors(
                                pred_op_id):  # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –ø—Ä–æ–π—Ç–∏ –ø–æ –≤—Å–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º
                            if s == n: continue
                            # –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ 'fwd' —Å–æ—Å–µ–¥–Ω–µ–π –¥—É–≥–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 'fwd' —Ç–µ–∫—É—â–µ–π –¥—É–≥–∏
                            if proc.graph.edges[pred_op_id, s]['fwd'] == proc.graph.edges[pred_op_id, n]['fwd']:
                                for (clust, res) in self.res_iter():
                                    sm = (1 if self.timetable[-1].get((self.time, s), (-1, -1))[
                                                   0] == res.ID else 0) * \
                                         (self.OpPriorMatrix[s] +
                                          self.ResPriorMatrix[res.ID] +
                                          self.StreamPriorMatrix[s] *
                                          self.get_productivity(s, res.ID))

                                    if DEBUG_REV and sm != 0:
                                        print("\t\t–í–∫–ª–∞–¥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ '", self.get_proc_op(s)[1].Name,
                                              "' –≤ ùúì¬∫", sm, "–∏–∑ –Ω–∏—Ö")
                                    summa_parallel += sm

                    # –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–ø—Ä—è–∂—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π –ø–æ—Ç–æ–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                    sum_stream = self.StreamPriorMatrix.get(n, 0)
                    for succ_op_id in proc.graph.successors(n):
                        for (clust, res) in self.res_iter():
                            # —Å–æ –∑–Ω–∞–∫–æ–º –ø–ª—é—Å, —Ç–∞–∫ –∫–∞–∫ –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏—Ç –º–∏–Ω—É—Å –∏ –ø—Ä–æ—Ö–æ–¥ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                            sm = (1 if self.timetable[len(self.timetable) - 1].get((self.time, succ_op_id), (-1, -1))[0]
                                       == res.ID else 0) * \
                                 (self.OpPriorMatrix[succ_op_id] +
                                  self.ResPriorMatrix[res.ID] +
                                  self.StreamPriorMatrix.get(succ_op_id,
                                                             self.stream_init_conditions.get(succ_op_id, 0)) *
                                  self.get_productivity(succ_op_id, res.ID))

                            if DEBUG_REV and sm != 0:
                                print("\t\t–í–∫–ª–∞–¥ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ '", self.get_proc_op(succ_op_id)[1].Name,
                                      "' –≤ ùúì‚Åø", sm, ", –∏–∑ –Ω–∏—Ö")
                                print("\t\t\tùúì¬∫", self.OpPriorMatrix[succ_op_id])
                                print("\t\t\tùúì·¥æ", self.ResPriorMatrix[res.ID])
                                print("\t\t\tùúì‚Åø‚úïc", self.StreamPriorMatrix[succ_op_id] *
                                      self.get_productivity(succ_op_id, res.ID))

                            sum_stream += sm

                    if NORMALIZE_LOG_ANGLE and (summa_pred + summa_parallel) > 1:
                        self.OpPriorMatrix[n] -= log10(summa_pred + summa_parallel)
                    else:
                        self.OpPriorMatrix[n] -= summa_pred + summa_parallel
                    ograph[n].append(self.OpPriorMatrix[n])

                    if NORMALIZE_LOG_ANGLE and (sum_stream) > 1:
                        self.StreamPriorMatrix[n] = log10(sum_stream)
                    else:
                        self.StreamPriorMatrix[n] = sum_stream

                    if DEBUG_REV:
                        print("\t\t–ò—Ç–æ–≥–æ ùúì¬∫:", self.OpPriorMatrix[n],
                              "\t ùúì‚Åø:", self.StreamPriorMatrix[n])

                    pgraph[n].append(self.StreamPriorMatrix[n])
                    work[n].append(
                        str(self.timetable[len(self.timetable) - 1][(self.time, n)][0]) if (self.time, n) in
                                                                                           self.timetable[
                                                                                               len(
                                                                                                   self.timetable) - 1] else '_')


            self.time -= self.Step

        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å–æ–ø—Ä—è–∂—ë–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        self.operation_init_conditions = self.OpPriorMatrix.copy()
        self.stream_init_conditions = self.StreamPriorMatrix.copy()
        self.resource_init_conditions = self.ResPriorMatrix.copy()

        if DEBUG_REV:
            print('\t–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
            for op, g in ograph.items():
                print('"' + "%s" % (self.get_proc_op(op)[1].Name,) + '"', end=": ")
                for p in g[::-1]:
                    print(round(p), end=", ")
                print()
            print('\t–ü–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
            for op, g in pgraph.items():
                print('"' + "%s" % (self.get_proc_op(op)[1].Name,) + '"', end=": ")
                for p in g[::-1]:
                    print(round(p), end=", ")
                print()

        if DEBUG_REV:
            print('*' * 10, 'rew psi')
            for op, g in ograph.items():
                print('"' + "%s" % (self.get_proc_op(op)[1].Name,) + '"', end=": ")
                for p in g[::-1]:
                    print(round(p), end=", ")
                print()

            print('*' * 10, 'rew u')
            for op, g in work.items():
                # print '"' + "%s" % (self.get_proc_op(op)[1].Name,) + '"',
                for p in g[::-1]:
                    print(p, end=" ")
                print(self.get_proc_op(op)[0].Name, self.get_proc_op(op)[1].Name)

                '''
                for proc in self.ProcList.values():
                    for op in proc.OpList.values():
                        self.OpPriorMatrix[op] = log10(self.OpPriorMatrix[op] + 1)

                for clust in self.ClustList.values():
                    for res in clust.ResList.values():
                        self.ResPriorMatrix[op] = log10(self.ResPriorMatrix[res] + 1)
                '''
        if self.p:
            self.p.send("INF: –û–±—Ä–∞—Ç–Ω–æ–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        pass

    def execute_plan(self, ts=0, tf=float('inf')):
        """–ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ –∏–º–µ—é—â–µ–º—É—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
        :param ts: –Ω–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–º–∏—Ç–∞—Ü–∏–∏
        :param tf: –∫–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏–º–∏—Ç–∞—Ü–∏–∏, –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        """
        if PRINT or DEBUG or DEBUG_L1:
            self.ograph = {n[1].ID: list() for n in self.op_iter()}
            self.pgraph = {n[1].ID: list() for n in self.op_iter()}
            self.work = {n[1].ID: list() for n in self.op_iter()}

        self.reset_executed(clear_timetable=False, clear_restrictions=False)  # —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏
        self.OpPriorMatrix = self.operation_init_conditions.copy()
        self.StreamPriorMatrix = self.stream_init_conditions.copy()
        self.ResPriorMatrix = self.resource_init_conditions.copy()

        if len(self.timetable) == 0:
            return
        crop_timetable = {}  # —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        t_fin = tf
        # t_fin = min(tf, self.D)
        for proc in self.ProcList.values():  # –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º
            for job in proc.OpList.values():  # –ø–æ –≤—Å–µ–º –æ–ø—Ä–µ—Ä–∞—Ü–∏—è–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                # –ø—Ä–æ–ø—É—Å–∫ —Ä–∞–±–æ—Ç —Å –Ω—É–ª–µ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (—Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø, –≤–µ—Ç–≤–ª–µ–Ω–∏—è –∏ —Ç.–¥.)
                if job.A == 0: continue
                # self.Schedule[(proc, job)] = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π start stop res intens
                t = ts
                while t <= t_fin:  # –ø—Ä–æ–±–µ–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ –∏ –ø–æ–∏—Å–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                    # TODO: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Ü–∏–∫–ª –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - Workers
                    if (t, job.ID) in self.timetable[-1]:  # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —à–∞–≥–µ
                        # –∑–∞–ø–æ–º–Ω–∏–º —Ä–µ—Å—É—Ä—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞
                        res_id = self.timetable[-1][(t, job.ID)][0]
                        # –∑–∞–ø–æ–º–Ω–∏–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞
                        intens = self.timetable[-1][(t, job.ID)][1]
                        res = self.get_clust_res(res_id)[1]
                        # –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
                        res.load_operation(job, intens)
                        # –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤—Ä–µ–º—è –≤–µ—Ç–≤–ª–µ–Ω–∏—è
                        crop_timetable[(t, job.ID)] = (res_id, intens)
                        res.Release()  # —Å–Ω—è—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å –ø–µ—Ä–µ–¥ —Å–¥–≤–∏–≥–æ–º –≤—Ä–µ–º–µ–Ω–∏
                        if PRINT:
                            print(t, "–æ–ø–µ—Ä–∞—Ü–∏—è", job.ID, "–Ω–∞", res_id, "—Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é", intens)

                            # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–ª—É—á–∞—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
                            # self.calculate_priorities(t)
                    t += 1

        # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–µ—Ç—Å—è –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–û–≥–æ —É—á–∞—Å—Ç–∫–∞
        self.timetable[-1] = crop_timetable.copy()

        t = ts
        while t <= t_fin:  # –ø—Ä–æ–±–µ–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ –∏ —Ä–∞—Å—á—ë—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø–æ —É—Å–µ—á—ë–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            self.calculate_priorities(t)
            t += 1

        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–æ–¥–µ–ª–∏ - "–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∫–∞—á–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏"
        self.time = t_fin

        if DEBUG:
            print('*' * 10, 'fwd u')
            for mt in range(0, int(self.D) - 1):
                sys.stdout.write(str(mt).zfill(2))
            print()
            for op, g in sorted(self.work.items(), key=lambda k: k[0]):
                # print '"' + str(self.get_proc_op(op)[1].ID) + '"',
                for p in g:
                    print(p, end=" ")
                # print self.OpPriorMatrix[op]
                print(self.get_proc_op(op)[1].Name, self.OpPriorMatrix.get(op, None), self.get_proc_op(op)[1].ID)

    def calculate_plan(self, options=None):
        """–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
        :param options: –ø–∞—Ä–∞–º–µ–Ω—Ç—ã —Ä–∞—Å—á—ë—Ç–æ–≤:
                        method: –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è (FIFO, LIFO, PULP), default = FIFO
                        relaxed: —Å–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π, default = False
                        debug_tab: –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏
        """
        ####
        ## PAVLOV: –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –Ω–∞ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π...
        #global i
        #if i > 10:
        #    pass
        #    #return
        #insp[i] = inspect.stack()[1][2]
        #i += 1
        ####
        if DEBUG_L1:
            print("–†–∞—Å—á—ë—Ç –ø–ª–∞–Ω–∞")

        if self.logger:
            self.logger.put({"message": "–ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞", "type": "log"})

        integrate_options = dict(method='FIFO', relaxed=False, debug_tab=0)
        if options is not None:
            integrate_options['method'] = options.get('method', 'FIFO')
            integrate_options['relaxed'] = options.get('relaxed', False)
            integrate_options['debug_tab'] = options.get('debug_tab', 0)


        # if DEBUG_L1:
        #     print('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω—É–ª–µ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è ' + (
        #         '(—Ä–µ–ª–∞–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞)' if integrate_options['relaxed'] else ''))

        # –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å –∑–∞–ø—Ä–µ—Ç–∞–º–∏ –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        # if not integrate_options.get('relaxed', False):
        #     self.integrate(0, self.D, dict(method="NONE", relaxed=integrate_options.get('relaxed', False)))
        #     self.Assess()

        if DEBUG_L1:
            print('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è ' + (
                '(—Ä–µ–ª–∞–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞)' if integrate_options['relaxed'] else ''))

        if self.logger:
            self.logger.put({"type": "log", "message": "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è " + (
                '(—Ä–µ–ª–∞–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞)' if integrate_options['relaxed'] else '')})

        #TODO: Update integrate_options

        # –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å –∑–∞–ø—Ä–µ—Ç–∞–º–∏ –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        self.integrate(0, self.D, dict(debug_tab=integrate_options['debug_tab'], method="FIFO", relaxed=integrate_options.get('relaxed', False)))
        self.Assess()

        if self.logger:
            self.logger.put({"type": "log", "message": '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ'})

        self.reset_executed(clear_timetable=False,
                            clear_restrictions=not integrate_options['relaxed'])

        if integrate_options['method'] != 'PULP':
            if DEBUG:
                print("_" * 60)
                for q in self.QltList:
                    for i in q: print(i, "\t", end=' ')
                    print()
                    # END DEBUG
            return

        # —Å—Ç–∞—Ä—Ç—É–µ–º —Å –Ω—É–ª–µ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
        self.integrate(0, self.D, dict(debug_tab=integrate_options['debug_tab'], method="NULL", relaxed=integrate_options.get('relaxed', False)))

        self.Assess()

        self.iteration = 0
        self.conflict_count = 0

        # PAVLOV: –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞ —Ä–∞—Å—á–µ—Ç—ã, –Ω–µ –º–æ–¥–µ–ª—å–Ω–æ–µ)
        while True:
            # PAVLOV: –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∫–∞ –Ω–µ —Å–ø–∞—Å–∞–µ—Ç –æ—Ç –±–∏–µ–Ω–∏–π, –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –≥–¥–µ-—Ç–æ –≤–Ω—É—Ç—Ä–∏
            # if self.iteration > 0: break
            if DEBUG:
                print("_" * 60)
                for q in self.QltList:
                    for i in q: print('{0:9}'.format(i, ), )

                    # for i in q: print i,
                    print()

            if self.logger:
                self.logger.put({
                    "message": '–ò—Ç–µ—Ä–∞—Ü–∏—è {}'.format(self.iteration,),
                    "variables": {
                        "iteration": self.iteration
                    },
                    "type": "log"
                })


            # END DEBUG

            self.calculate_transversality()
            self.reverse_integrate(self.D, 0)
            self.reset_executed(clear_timetable=False,
                                clear_restrictions=not integrate_options['relaxed'])

            # –æ—á–∏—â–∞—Ç—å –∑–∞–ø—Ä–µ—Ç—ã –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–≥–æ–Ω–µ.
            # –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —Ä–µ–ª–∞–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø—Ä–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
            if PRINT:
                print("*" * 20, "conjunctive initial conditions")
                for k, v in self.operation_init_conditions.items():
                    print(k, v)

            #self.normalize_left()
            from copy import copy
            integrate_options2 = copy(integrate_options)
            integrate_options2['debug_tab'] = integrate_options['debug_tab'] + 1
            self.integrate(0, self.D, integrate_options2)  # –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞

            if self.p: self.p.send('VAL: ' + str(self.QltList[0][-1]))
            # –≤ pipe –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞

            if self.logger:
                self.logger.put({"type": 'log', 'message': '–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {}'.format(self.iteration,)})

            if len(self.QltList["J0"]) > (1 if integrate_options['relaxed'] else 3):
                if self.p: self.p.send("CMD: stop")
                self.Assess()
                break

            # # DEBUG
            #
            #			print ("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
            #
            #			for t in range(int(Dyn.D)):
            #				print "–í—Ä–µ–º—è: " + str(t)
            #				for proc in Dyn.ProcList.values():
            #					for op in proc.OpList.values():
            #						if (t, op) in Dyn.timetable:
            #							print op.ID,
            #							print Dyn.OpPriorMatrix[op],
            #							print str(op.X) + " -> " + str(op.A)
            #
            #			if raw_input() == "b": break
            #
            #			# END DEBUG

            # self.Assess()
            if self.Assess(): break

            # if not integrate_options['relaxed']:
            #     break

            self.iteration += 1

        self.reset_executed(clear_timetable=False,
                            clear_restrictions=not integrate_options['relaxed'])

        if self.p: self.p.send("CMD: stop")
        if self.logger:
            self.logger.put({"message": "–†–∞—Å—á—ë—Ç –æ–∫–æ–Ω—á–µ–Ω", "type": "log"})

        if DEBUG_Q:
            print("–†–∞—Å—á—ë—Ç –æ–∫–æ–Ω—á–µ–Ω")

        # –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ó–∞—Ö–∞—Ä–æ–≤–∞
        #writer = csv.writer(ham_file, dialect='excel', delimiter=';')
        #writer.writerows(csv_data)
        #ham_file.close()

    # –≤ pipe –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏


    def SaveGanttXML(self, outfilename):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dhtmlxGantt"""

        dataXML = etree.Element('data')
        doc = etree.ElementTree(dataXML)
        now = datetime.now()
        procStart = {}
        procEnd = {}

        # –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–∏–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–´—Ö —Ä–∞–º–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞: —Å—Ç–∞—Ä—Ç –≤ –∫–æ–Ω—Ü–µ, –∫–æ–Ω–µ—Ü - –≤ –Ω–∞—á–∞–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        for proc in self.ProcList.values():
            procStart[proc] = now + timedelta(minutes=int(self.D))
            procEnd[proc] = now

        # —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–æ–º

        def add_scsr(gnt, proc, op_id):
            op = proc.get_op(op_id)
            if not (proc, op) in gnt:
                gnt.append((proc, op))
            for scsr in proc.graph.successors_iter(op_id):
                add_scsr(gnt, proc, scsr)

        gantt_list = list()

        for proc in self.ProcList.values():

            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —É–∑–ª—ã
            start_nodes = list()
            end_nodes = list()
            for node in proc.graph.nodes():
                if not proc.graph.predecessors(node):
                    start_nodes.append(node)
                if not proc.graph.successors(node):
                    end_nodes.append(node)

            #
            for start_node in start_nodes:
                add_scsr(gantt_list, proc, start_node)

        # for proc in self.ProcList.values():
        #
        #     start_nodes = list()
        #     end_nodes = list()
        #     for node in proc.graph.nodes_iter():
        #         if not proc.graph.predecessors(node):
        #             start_nodes.append(node)
        #         if not proc.graph.successors(node):
        #             end_nodes.append(node)
        #     mutations = [zip(x,start_nodes) for x in permutations(start_nodes,len(end_nodes))]
        #
        #     for path in nx.all_simple_paths(proc.graph, source=0, target=3):

        for proc, job in gantt_list:
            if not (proc, job) in self.Schedule:
                continue
            # –ø–æ –≤—Å–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            for i, j in zip(self.Schedule[(proc, job)], range(len(self.Schedule[(proc, job)]))):
                start = now + timedelta(days=int(i.get('start', 0)))
                stop = now + timedelta(days=int(i.get('stop', 0)))

                #if DEBUG:
                #    print("_ " * i.get('start', 0), "|" * i.get('stop', 0))

                task = etree.SubElement(dataXML, 'task', id=str(job.ID),
                                        start_date=start.strftime('%d-%m-%Y %H:%M'), duration=str(int(ceil(job.A))),
                                        progress=str(job.X / job.A), end_date=stop.strftime('%d-%m-%Y %H:%M'),
                                        parent=str(proc.ID))
                task.text = job.Name

                etree.SubElement(task, 'holder').text = i['res'].Name
                etree.SubElement(task, 'identificator').text = str(job.ID) + str(j)
                # etree.SubElement(task, 'priority').text =

                # —Ä–∞—Å—à–∏—Ä—è–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—Ä–æ–≤–µ—Ä—è—è –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                # print 'start:', now + timedelta(minutes = int(i['start'])), procStart[proc], min(now + timedelta(minutes = int(i['start'])), procStart[proc])
                procStart[proc] = min(now + timedelta(days=int(i['start'])), procStart[proc])
                # print 'stop:', now + timedelta(minutes = int(i['stop'])), procEnd[proc], max(now + timedelta(minutes = int(i['stop'])), procEnd[proc])
                procEnd[proc] = max(now + timedelta(days=int(i.get('stop', 0))), procEnd[proc])

        # —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for proc in self.ProcList.values():
            processTask = etree.SubElement(dataXML, 'task', id=str(proc.ID),
                                           start_date=procStart[proc].strftime('%d-%m-%Y %H:%M'),
                                           end_date=procEnd[proc].strftime('%d-%m-%Y %H:%M'))
            processTask.text = proc.Name

            etree.SubElement(processTask, 'holder').text = proc.Name
            etree.SubElement(processTask, 'identificator').text = str(proc.ID)

        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –æ–ø–µ—Ä–∞—Ü–∏–π
        opLinks = etree.SubElement(dataXML, 'coll_options', {'for': 'links'})

        for proc in self.ProcList.values():
            for n in proc.graph.edges():
                linkItem = etree.SubElement(opLinks, 'item', id=str(uuid1()),
                                            source=str(n[0]),
                                            target=str(n[1]),
                                            type='0')

        outFile = open(outfilename, 'wb')
        doc.write(outFile, xml_declaration=True, encoding='utf-8')

        """
            <data>
                <task id='1' parent='' start_date='01-04-2013 00:00' open='true' progress='0.4' end_date='01-04-2013 00:18'>
                    <holder><![CDATA[Mike]]></holder>
                    <priority><![CDATA[High]]></priority>
                    <![CDATA[Project #2]]>
                </task>
                <task id='2' parent='1' start_date='01-04-2013 13:00' duration='8' progress='0.6' end_date='01-04-2013 13:08'>
                    <holder><![CDATA[John]]></holder>
                    <priority><![CDATA[Medium]]></priority>
                    <![CDATA[Task #1]]>
                </task>
                <task id='3' parent='1' start_date='01-04-2013 12:00' duration='8' progress='0.6' end_date='01-04-2013 12:08'>
                    <holder><![CDATA[Alex]]></holder>
                    <priority><![CDATA[Low]]></priority>
                    <![CDATA[Task #2]]>
                </task>
                <coll_options for='links'>
                    <item id='1' source='1' target='2' type='1' />
                    <item id='2' source='2' target='3' type='0' />
                    <item id='3' source='3' target='4' type='0' />
                    <item id='4' source='2' target='5' type='2' />
                </coll_options>
            </data>
        """

    def SaveScheduleXML(self, outfilename):
        """–°–æ–∑–¥–∞–Ω–∏–µ XML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""

        dataXML = etree.Element('data')
        doc = etree.ElementTree(dataXML)
        now = datetime.now()
        procStart = {}
        procEnd = {}

        # –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–∏–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–´—Ö —Ä–∞–º–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞: —Å—Ç–∞—Ä—Ç –≤ –∫–æ–Ω—Ü–µ, –∫–æ–Ω–µ—Ü - –≤ –Ω–∞—á–∞–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        for proc in self.ProcList.values():
            procStart[proc] = now + timedelta(minutes=int(self.D))
            procEnd[proc] = now

        # —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≥—Ä–∞—Ñ–æ–º

        def add_scsr(gnt, proc, op_id):
            op = proc.get_op(op_id)
            if not (proc, op) in gnt:
                gnt.append((proc, op))
            for scsr in proc.graph.successors_iter(op_id):
                add_scsr(gnt, proc, scsr)

        gantt_list = list()

        for proc in self.ProcList.values():

            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —É–∑–ª—ã
            start_nodes = list()
            end_nodes = list()
            for node in proc.graph.nodes():
                if not proc.graph.predecessors(node):
                    start_nodes.append(node)
                if not proc.graph.successors(node):
                    end_nodes.append(node)

            #
            for start_node in start_nodes:
                add_scsr(gantt_list, proc, start_node)

        # for proc in self.ProcList.values():
        #
        #     start_nodes = list()
        #     end_nodes = list()
        #     for node in proc.graph.nodes_iter():
        #         if not proc.graph.predecessors(node):
        #             start_nodes.append(node)
        #         if not proc.graph.successors(node):
        #             end_nodes.append(node)
        #     mutations = [zip(x,start_nodes) for x in permutations(start_nodes,len(end_nodes))]
        #
        #     for path in nx.all_simple_paths(proc.graph, source=0, target=3):

        for proc, job in gantt_list:
            if not (proc, job) in self.Schedule:
                continue
            # –ø–æ –≤—Å–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            for i, j in zip(self.Schedule[(proc, job)], range(len(self.Schedule[(proc, job)]))):
                start = now + timedelta(days=int(i.get('start', 0)))
                stop = now + timedelta(days=int(i.get('stop', 0)))

                # if DEBUG:
                #     print "_ " * i.get('start', 0), "|" * i.get('stop', 0)

                task = etree.SubElement(dataXML, 'task', id=str(job.ID),
                                        start_date=start.strftime('%d-%m-%Y %H:%M'), duration=str(int(ceil(job.A))),
                                        progress=str(job.X / job.A), end_date=stop.strftime('%d-%m-%Y %H:%M'),
                                        parent=str(proc.ID))
                task.text = job.Name

                etree.SubElement(task, 'holder').text = i['res'].Name
                etree.SubElement(task, 'identificator').text = str(job.ID) + str(j)
                # etree.SubElement(task, 'priority').text =

                # —Ä–∞—Å—à–∏—Ä—è–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—Ä–æ–≤–µ—Ä—è—è –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                # print 'start:', now + timedelta(minutes = int(i['start'])), procStart[proc], min(now + timedelta(minutes = int(i['start'])), procStart[proc])
                procStart[proc] = min(now + timedelta(days=int(i['start'])), procStart[proc])
                # print 'stop:', now + timedelta(minutes = int(i['stop'])), procEnd[proc], max(now + timedelta(minutes = int(i['stop'])), procEnd[proc])
                procEnd[proc] = max(now + timedelta(days=int(i.get('stop', 0))), procEnd[proc])

        # —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for proc in self.ProcList.values():
            processTask = etree.SubElement(dataXML, 'task', id=str(proc.ID),
                                           start_date=procStart[proc].strftime('%d-%m-%Y %H:%M'),
                                           end_date=procEnd[proc].strftime('%d-%m-%Y %H:%M'))
            processTask.text = proc.Name

            etree.SubElement(processTask, 'holder').text = proc.Name
            etree.SubElement(processTask, 'identificator').text = str(proc.ID)

        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –æ–ø–µ—Ä–∞—Ü–∏–π
        opLinks = etree.SubElement(dataXML, 'coll_options', {'for': 'links'})

        for proc in self.ProcList.values():
            for n in proc.graph.edges():
                linkItem = etree.SubElement(opLinks, 'item', id=str(uuid1()),
                                            source=str(n[0]),
                                            target=str(n[1]),
                                            type='0')

        outFile = open(outfilename, 'wb')
        doc.write(outFile, xml_declaration=True, encoding='utf-8')

        """
            <schedule>
                <processes>
                    <process id="1">
                        <operation id="1">
                            <name>–ü–æ–≥—Ä—É–∑–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Ññ3 –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É</name>
                            <priority>0.3254</priority>
                            <resource>RS_2</resource>
                            <start>
                                <time intensity="5">12</time>
                                <time intensity="3">24</time>
                            </start>
                            <end>
                                <time>15</time>
                                <time>25</time>
                            </end>
                        </operation>
                        <operation id="2">
                            <name>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Ññ3</name>
                            <priority>0.3254</priority>
                            <resource>RS_3</resource>
                            <start>
                                <time intensity="7">0</time>
                                <time intensity="7">16</time>
                                <time intensity="2">26</time>
                            </start>
                            <end>
                                <time>11</time>
                                <time>23</time>
                                <time>31</time>
                            </end>
                        </operation>
                    </process>
                </processes>
                <quality>
                    <pki id="J0" generalized="true">
                        <name>–æ–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</name>
                        <val>270.0</val>
                    </pki>
                    <pki id="J1">
                        <weight>0.8</weight>
                        <name>–ó–∞—Ç—Ä–∞—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏</name>
                        <val>321</val>
                    </pki>
                    <pki id="J2">
                        <weight>0.2</weight>
                        <name>–ó–∞—Ç—Ä–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏</name>
                        <val>31</val>
                    </pki>
                </quality>
                <resources>
                    <resource id="RS_2">
                        <worktime>12</worktime>
                    </resource>
                    <resource id="RS_3">
                        <worktime>16</worktime>
                    </resource>
                </resources>
            </schedule>
        """

    def SaveListXML(self, outfilename):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dhtmlxList"""

        pki_names = {
            'J0': u'–æ–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞',
            'J1': u'–Ω–µ–≤—è–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            'J2': u'–Ω–µ–≤—è–∑–∫–∞ –ø–æ –ø–æ—Ç–æ–∫—É',
            'J3': u'–∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (ùúÇ-—Ñ—É–Ω–∫—Ü–∏—è)',
            'J4': u'—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ä–æ–∫–æ–≤ (q-—Ñ—É–Ω–∫—Ü–∏—è)',
            'J5': u'–Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤',
            'J6': u'—Ä–∞–∑—Ä—ã–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π',
            'J7': u'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
            'J8': u'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
            'J9': u'–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–æ–±–∞—Å—Ç–Ω–æ—Å—Ç–∏'
        }

        dataXML = etree.Element('data')
        doc = etree.ElementTree(dataXML)

        for i, pki in self.QltList.items():
            ind = etree.SubElement(dataXML, 'item', id=str(i))

            etree.SubElement(ind, 'pki_name').text = pki_names[i]
            etree.SubElement(ind, 'pki_val').text = str(pki[-1])

        outFile = open(outfilename, 'wb')
        doc.write(outFile, xml_declaration=True, encoding='utf-8')

        """
        <data>
            <item id="J0">
                <pki_name>–æ–±–æ–±—â—ë–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</pki_name>
                <pki_val>270.0</pki_val>
            </item>
            <item id="J1">
                <pki_name>–Ω–µ–≤—è–∑–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</pki_name>
                <pki_val>0.0</pki_val>
            </item>
        </data>
        """

    def SaveChartXML(self, outfilename):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dhtmlxChart"""

        dataXML = etree.Element('data')
        doc = etree.ElementTree(dataXML)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        reses = sorted([res for clus, res in self.res_iter()], key=lambda rs: rs.Fatigue, reverse=True)
        for i, res in enumerate(reses):
            if res.Fatigue != 0:
                ind = etree.SubElement(dataXML, 'item', id=str(i))

                etree.SubElement(ind, 'res_name').text = res.Name
                etree.SubElement(ind, 'res_fat').text = str(res.Fatigue)

        outFile = open(outfilename, 'wb')
        doc.write(outFile, xml_declaration=True, encoding='utf-8')

        """
            <data>
               <item id="1">
                   <sales>7.3</sales>
                   <year>2008</year>
               </item>
               <item id="2">
                   <sales>7.6</sales>
                   <year>2009</year>
               </item>
            </data>
        """

    def BuildSchedule(self, iteration=0):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        iteration -= 1  # –≤ timetable –ø–µ—Ä–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –Ω–æ–º–µ—Ä 0, –∞ –≤ Quality - –Ω–æ–º–µ—Ä 1
        if len(self.timetable) == 0 or not sum([len(k) for k in self.timetable]): return
        t = 0
        for proc in self.ProcList.values():  # –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º (values –±–æ–ª–µ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ–Ω –∫ –ø–∞–º—è—Ç–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å values)
            # pydevd.settrace('macmini')
            for job in proc.OpList.values():  # –ø–æ –≤—Å–µ–º –æ–ø—Ä–µ—Ä–∞—Ü–∏—è–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                # –ø—Ä–æ–ø—É—Å–∫ —Ä–∞–±–æ—Ç —Å –Ω—É–ª–µ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (—Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø, –≤–µ—Ç–≤–ª–µ–Ω–∏—è –∏ —Ç.–¥.)
                if job.A == 0: continue
                self.Schedule[(proc, job)] = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π start stop res intens
                t = 0
                JobRun = 0  # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —à–∞–≥–µ
                WasOnRes = None  # –Ω–∞ –∫–∞–∫–æ–º —Ä–µ—Å—É—Ä—Å–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —à–∞–≥–µ
                WasIntens = 0  # –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ
                while t <= max([k[0] for k in self.timetable[iteration].keys()]) + 1:
                    # –ø—Ä–æ–±–µ–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ –∏ –ø–æ–∏—Å–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                    # –∑–∞–≥–ª—è–¥—ã–≤–∞–µ–º –Ω–∞ 1 —Ç–∞–∫—Ç –≤–ø–µ—Ä—ë–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    # TODO: –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Ü–∏–∫–ª –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - Workers
                    if (t, job.ID) in self.timetable[iteration]:  # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —à–∞–≥–µ
                        JobNow = 1
                        OnRes = self.timetable[iteration][(t, job.ID)][
                            0]  # –∑–∞–ø–æ–º–Ω–∏–º —Ä–µ—Å—É—Ä—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞
                        Intens = self.timetable[iteration][(t, job.ID)][
                            1]  # –∑–∞–ø–æ–º–Ω–∏–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞
                    else:
                        JobNow = 0
                        OnRes = None
                        Intens = 0

                    if JobNow == 1 and JobRun == 1 and (
                            OnRes != WasOnRes or WasIntens != Intens):  # –æ—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–±–æ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
                        self.Schedule[(proc, job)][-1]['stop'] = t

                    if (JobNow == 0 and JobRun == 1):  # –æ—Å—Ç–∞–Ω–æ–≤–∏–º —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
                        self.Schedule[(proc, job)][-1]['stop'] = t

                    # TODO: –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–∫–∂–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É
                    if JobNow == 1 and (
                            JobRun == 0 or OnRes != WasOnRes or WasIntens != Intens):  # —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º —Ä–µ—Å—É—Ä—Å–µ –∏–ª–∏ —Å –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é
                        JobRun = 1
                        WasOnRes = OnRes  # –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
                        WasIntens = Intens  # –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
                        self.Schedule[(proc, job)].append({'start': t, 'res': self.get_clust_res(OnRes)[1],
                                                           'intens': self.timetable[iteration][(t, job.ID)][1]})

                    if JobNow == 0:
                        JobRun = 0  # –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
                        WasOnRes = None  # –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
                        WasIntens = 0  # –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
                    else:
                        JobRun = 1

                    t += self.Step
        return t

    def DetectAnyTime(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"""
        if len(self.QltList['J0']) > 2:
            return min(enumerate(self.QltList['J0'][3:]), key=operator.itemgetter(1))[0] + 3
        else:
            return 1    # PAVLOV: –Ω—É–ª–µ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1.0
        


class UniProcess(object):
    """–ö–ª–∞—Å—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    ProcID = 0

    def __init__(self, pname, pid=None):
        """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞.
        :param pname: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞,
        :param pid: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        """
        if pid:
            self.ID = str(pid)
            # UniProc.ProcID = int(pid) + 1  # –Ω—É–∂–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã
        else:
            self.ID = str(uuid1())  # UniProc.ProcID  # –ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–∫–≤–æ–∑–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            # UniProc.ProcID = UniProc.ProcID + 1

        self.Name = pname
        self.OpList = {}  # –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –í –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–≤–æ–∑–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
        # self.OpList['_init'] = –ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é!

        self.graph = nx.DiGraph()  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ –æ–ø–µ—Ä–∞—Ü–∏–π

    def add_operation(self, opname, a, ap, opid=None, tempid=None, x=None, y=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ–ø–µ—Ä–∞—Ü–∏—é.
        :param opname: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
        :param a: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        :param ap: –æ–±—ä—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏
        :param opid: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None
        :param tempid: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ —à–∞–±–ª–æ–Ω–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None
        :return newop: –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        newop = UniOp(opname, a, ap, opid, tempid, x, y)

        # if not len(self.OpList):
        #	self.OpList["_init"] = newop			# –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–≤–æ–π; –¥–æ—Å—Ç—É–ø –∫ –æ—Å—Ç–∞–ª—å–Ω—ã–º —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É UniOp.Next
        # –∑–Ω–∞–∫ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        # else:
        #	pass
        #

        self.OpList[newop.ID] = newop

        # pydevd.settrace('macmini')
        self.graph.add_node(newop.ID, data=newop.ID)  # –¥–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≥—Ä–∞—Ñ–∞

        return newop

    def DelOp(self, op_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –µ—ë –∏–Ω–¥–µ–∫—Å—É"""
        self.graph.remove_node(op_id)

    def get_op(self, op_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É"""
        return self.OpList[op_id] if op_id in self.OpList else None

    def add_link(self, from_op, to_op, fwd_group=1, rev_group=1):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏. –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ fwd_group (–∏–ª–∏ rev_group) –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –∏—Å–∫–ª—é—á–∞—é—â–∏–º –ò–õ–ò, –∞ —Ä–∞–∑–Ω—ã–µ - –ò
        PAVLOV: –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —Ä–æ–≤–Ω–æ 1 –æ–ø–µ—Ä–∞—Ü–∏—è (–≥—Ä—É–ø–ø—ã - —ç—Ç–æ –Ω–æ–º–µ—Ä–∞ fwd –∏ rev)
        """
        self.graph.add_edge(from_op, to_op, fwd=fwd_group, rev=rev_group)
        pass

    def remove_link(self, from_op, to_op):
        "–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"
        self.graph.remove_edge(from_op, to_op)
        pass


class UniOp(object):
    "–ö–ª–∞—Å—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
    OpID = 0  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—á—ë—Ç—á–∏–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫–µ—Å–∞

    def __init__(self, opname, a, ap, opid=None, template_id=None, node_x=None, node_y=None):
        "opname - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è, a - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏, ap - –æ–±—ä—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏, x - –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, xp - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–µ–Ω—ã–π –ø–æ—Ç–æ–∫"

        # TODO: —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —Ü–µ–ø–æ—á–∫–∏

        if opid:
            self.ID = str(opid)
            # UniOp.OpID = int(opid) + 1

        # TODO: –Ω—É–∂–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã

        else:
            self.ID = str(uuid1())  # UniOp.OpID  # –ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–∫–≤–æ–∑–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            # UniOp.OpID = UniOp.OpID + 1

        self.template_id = str(template_id)
        self.Name = opname
        self.A = a and float(a)
        self.AP = ap and float(ap)
        self.X = 0
        self.XP = 0
        self.Previous = None
        self.Next = None
        self.Status = OP_WAIT
        self.node_x = node_x
        self.node_y = node_y

    def execute(self, d=None, i=1):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
        :param d: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        :param i: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–±—ä—ë–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
        :return status: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """

        if d:
            self.X = min(self.X + d, self.A)
            self.XP = min(self.XP + i, self.AP)
        else:
            self.X = self.A  # –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            self.XP = self.AP  # –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ—Ç–æ–∫—É

        if self.X >= self.A and self.XP < self.AP:
            # Palich test (–∑–∞–º–µ–Ω–∞ OP_TIMEOUT –Ω–∞ OP_EXEC –Ω–∏–∂–µ –ø–æ –∫–æ–¥—É) - –ú–û–î–ï–õ–¨ –†–ê–ë–û–¢–ê–ï–¢ –ö–ê–ö –ß–ê–°–´
            self.Status = OP_EXEC  # –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã—à–ª–æ (–Ω–µ –Ω–∞—à–ª–æ—Å—å —Ä–µ—Å—É—Ä—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—ã –≤—ã–ø–æ–ª–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å—Ä–æ–∫, –±—É–¥–µ–º –Ω–∞—Ä—É—à–∞—Ç—å)
            #self.Status = OP_TIMEOUT  # –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if PRINT:
                print("–û–ø–µ—Ä–∞—Ü–∏—è", self.Name, "–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        elif self.X < self.A and self.XP >= self.AP:
            self.Status = OP_FLOW_COMPLETED  # –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            # self.X = self.A
            if PRINT:
                print("–û–ø–µ—Ä–∞—Ü–∏—è", self.Name, "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        elif self.X >= self.A and self.XP >= self.AP:
            self.Status = OP_COMPLETED  # –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å—á–µ—Ä–ø–∞–Ω–æ
            if PRINT:
                print("–û–ø–µ—Ä–∞—Ü–∏—è", self.Name, "–∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å—á–µ—Ä–ø–∞–Ω–æ")
        elif self.X > 0 and self.XP > 0:
            self.Status = OP_EXEC  # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            if PRINT:
                # print "–û–ø–µ—Ä–∞—Ü–∏—è", self.ID, "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                pass
        elif self.X == 0 and self.XP == 0:
            self.Status = OP_WAIT  # –∂–¥—ë—Ç –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if PRINT:
                print("–û–ø–µ—Ä–∞—Ü–∏—è", self.Name, "–∂–¥—ë—Ç –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        else:
            self.Status = OP_STRANGE  # —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if PRINT:
                print("–û–ø–µ—Ä–∞—Ü–∏—è", self.Name, "–≤ —Å—Ç—Ä–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

        return self.Status

    def reset(self, a=0, ap=0, x=0, xp=0):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ a (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å), ap (–æ–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö), x (–Ω–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏), xp (–Ω–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –ø–æ—Ç–æ–∫—É). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–æ—Å –¥–æ 0"""
        # TODO: –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–±—Ä–æ—Å–∞ –≤ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.X = x
        self.XP = xp
        self.Status = OP_WAIT  # –∂–¥—ë—Ç –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    def ExeQlt(self, t):
        """–ü–æ—Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t"""
        pass

    def Rest(self):
        "–í–µ—Ä–Ω—É—Ç—å –Ω–µ–≤—è–∑–∫–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä—ë–º—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        pass


class UniClust(object):
    """–ö–ª–∞—Å—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞"""
    ClustID = 0

    def __init__(self, cname, bw=0, cid=None):
        "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞. came - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è, bw - bandwidth - –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞"
        if cid:
            self.ID = str(cid)
            # UniClust.ClustID = int(cid) + 1  # –Ω—É–∂–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∏–Ω–¥–µ–∫—Å—ã
        else:
            self.ID = str(uuid1())  # UniClust.ClustID  # –ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–∫–≤–æ–∑–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            # UniClust.ClustID = UniClust.ClustID + 1

        self.Name = cname
        self.Bandwidth = float(bw)  # –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞
        self.ResList = {}  # –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ. –í –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–≤–æ–∑–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏

    def AddRes(self, rname, mi, thrds=1, price=0, rid=None, tid=None):
        """ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –≤ –º–æ–¥–µ–ª—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å.
            rname - –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            maxi - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞
            threads - —á–∏—Å–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π [1]
            price - —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞ [0]
            resid - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–∞ [–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ]
            tid - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Ñ–∞–π–ª–µ-—à–∞–±–ª–æ–Ω–µ [None]
        """
        newres = UniRes(rname, mi, thrds, price, rid, tid)
        self.ResList[newres.ID] = newres
        return newres

    def DelRes(self, op):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∞"""
        pass


class UniRes(object):
    "–ö–ª–∞—Å—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞"
    ResID = 0

    def __init__(self, resname, maxi, threads=1, price=0, resid=None, template_id=None):
        """
        :param resname: –∏–º—è —Ä–µ—Å—É—Ä—Å–∞
        :param maxi: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞
        :param threads: —á–∏—Å–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        :param price: —Å—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—Å—É—Ä—Å–∞
        :param resid: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–∞
        :param template_id: —à–∞–±–ª–æ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–∞
        """
        if resid:
            self.ID = str(resid)
            # UniRes.ResID = int(resid) + 1
        else:
            self.ID = str(uuid1())  # UniRes.ResID  # –ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–∫–≤–æ–∑–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
            # UniRes.ResID = UniRes.ResID + 1

        self.template_id = str(template_id)

        self.Name = resname

        # –∏—Å–∫–ª—é—á–∞–µ–º None –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (added by Palich)
        if maxi is None:
            self.MaxIntense = 10**6
        else:
            self.MaxIntense = maxi and float(maxi)

        if threads is None:
            self.MaxThreads = 1
        else:
            self.MaxThreads = threads and int(threads)

        if price is None:
            self.price = 0
        else:
            self.price = price and float(price)  # —Ü–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –º–æ—â–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞ –≤ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏

        self.Threads = 0
        self.Payload = 0
        self.Fatigue = 0  # "–£—Å—Ç–∞–ª–æ—Å—Ç—å" —Ä–µ—Å—É—Ä—Å–∞ - –æ–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—Ä–∞–±–æ—Ç–∫–∏
        self.cost = 0  # –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞

    def test_load(self, op, i=1):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –º–æ–∂–µ—Ç –ª–∏ —Ä–µ—Å—É—Ä—Å –ø—Ä–∏–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.
        :param op: –æ–ø–µ—Ä–∞—Ü–∏—è
        :param i: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        :return status: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (RES_REJECTED, RES_PROCESSING)
        """
        # –µ—Å–ª–∏ —Ä–µ—Å—É—Ä—Å –∑–∞–Ω—è—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é, –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Å–º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
        if self.Threads >= self.MaxThreads or self.Payload >= self.MaxIntense:  # —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            return RES_REJECTED
        # –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–π–º—ë—Ç —Ä–µ—Å—É—Ä—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é - —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º
        elif self.Threads + 1 >= self.MaxThreads or self.Payload + i >= self.MaxIntense:
            return RES_TO_FULL
        # –µ—Å–ª–∏ —Ä–µ—Å—É—Ä—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–æ–π –±—É–¥–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–Ω—è—Ç—å –µ—â—ë
        else:
            return RES_PROCESSING

    def load_operation(self, op, i=1.0):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π.
        :param op: –æ–ø–µ—Ä–∞—Ü–∏—è
        :param i: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        :return status: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ (RES_REJECTED, RES_PROCESSING)
        """
        if self.Threads < self.MaxThreads and self.Payload < self.MaxIntense:  # –ø–æ–∫–∞ –Ω–µ –∑–∞–±—å—ë–º –≤—Å–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å –∏ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            self.Threads += 1  # –∑–∞–¥–µ–π—Å—Ç–≤—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å
            self.Payload += i  # –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å
            self.Fatigue += 1  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–±—â–∏–π "—Å—Ç–∞–∂"
            self.cost += self.price * 1  # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞

            return op.execute(1, i)  # –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∫ —Ä–µ—à–∞—Ç–µ–ª—é
        else:
            return RES_REJECTED

    def Release(self):
        self.Payload = 0
        self.Threads = 0

    def reset(self):
        self.Release()
        self.Fatigue = 0
        self.cost = 0


# DEPRECATED, moved to bpmn_reader.py
def fill_template(dyn, number):
    """–°–æ–∑–¥–∞—ë—Ç number —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É dyn"""
    real_dyn = GrandSolver('–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ' + str(number))

    real_dyn.D = dyn.D

    real_dyn.QltList = dyn.QltList.copy()

    # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    protos_res = dict()  # —Å–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å —Å –µ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º –≤ —à–∞–±–ª–æ–Ω–µ

    for clst in dyn.ClustList.values():
        real_clst = real_dyn.AddClust(clst.Name)
        for res in clst.ResList.values():
            # new_id = uuid1()
            # –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å; –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
            real_clst.AddRes(res.Name, res.MaxIntense, res.MaxThreads, res.price, res.ID)
            # protos_res[res.ID] = str(new_id)

    # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω –≤–∏–¥–∏–º–æ—Å—Ç–∏
    real_dyn.res_availability = deepcopy(dyn.res_availability)
    # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
    zone_shift = 0
    for r, z in dyn.res_availability.items():
        real_dyn.res_availability[r] = list(map(lambda x: (x[0]+zone_shift, x[1]), z))
        zone_shift += 12

    # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
    for sec in range(0, number):

        real_proc = real_dyn.AddProc(u"Proc_" + str(sec + 1), uuid1())
        protos = dict()  # —Å–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –µ—ë –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º –≤ —à–∞–±–ª–æ–Ω–µ

        proc_name = list(dyn.ProcList.values())[0].ID # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–±—ã–ª–æ '1', –Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ)
        for op in dyn.get_proc(proc_name).OpList.values():
            # —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ –≤—Å–µ–π –º–æ–¥–µ–ª–∏
            new_id = uuid1()
            # new_id =  "op_" + str(randint(1, 100))
            real_op = real_proc.add_operation("–ò–ó–î_" + str(sec) + "_" + op.Name, op.A, op.AP,
                                              new_id)  # , op.template_id)
            protos[op.ID] = str(new_id)

            # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω –≤–∏–¥–∏–º–æ—Å—Ç–∏
            if dyn.availability.get(op.ID, False):
                real_dyn.availability[str(new_id)] = dyn.availability[op.ID]
                # –°–º–µ—â–µ–Ω–∏–µ
                # list(map(lambda x: (x[0] + sec * 3, x[1]) if (x[0] + sec * 3 <= dyn.D) else
                # (x[0] + sec * 3 - dyn.D, x[1]),
                #          dyn.availability[op.ID]))
                # real_dyn.availability[str(new_id)].insert(0, (0,0))

            # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            if dyn.penalty.get(op.ID, False):
                real_dyn.penalty[str(new_id)] = dyn.penalty[op.ID]

                # real_dyn.availability[str(new_id)] = dyn.availability[op.ID]
                # zone_shift = 0
                # for r, z in dyn.res_availability.items():
                #     real_dyn.res_availability[r] = list(map(lambda x: (x[0]+zone_shift, x[1]), z))
                #     zone_shift += 12

            # real_dyn.availability[str(new_id)] = dyn.res_availability[0]

            # –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏–º –Ω–æ–≤—ã–º–∏ —Å–≤—è–∑—è–º–∏
            for (clust, res) in dyn.res_iter():
                # if (op.template_id,res.template_id) in dyn.ProductivityMatrix:
                if (op.ID, res.ID) in dyn.ProductivityMatrix:
                    # real_dyn.ProductivityMatrix[(protos[op.ID],protos_res[res.ID])] = dyn.ProductivityMatrix[(op.template_id,res.template_id)]
                    real_dyn.ProductivityMatrix[(real_op.ID, res.ID)] = dyn.ProductivityMatrix[(op.ID, res.ID)]

        # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
        real_proc.graph = dyn.get_proc(proc_name).graph.copy()

        # –ø–æ–¥–º–µ–Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É–∑–ª–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ
        nx.relabel_nodes(real_proc.graph, protos, copy=False)

    return real_dyn


def clone_model(dyn):
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª—É–±–æ–∫–∏–π –∫–ª–æ–Ω –º–æ–¥–µ–ª–∏"""
    real_dyn = GrandSolver('–ö–ª–æ–Ω –º–æ–¥–µ–ª–∏')

    real_dyn.D = dyn.D

    real_dyn.QltList = deepcopy(dyn.QltList)
    # real_dyn.QltList = {i:list([v[0]]) for i,v in dyn.QltList.items()}

    # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—Ç–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    real_dyn.restriction = deepcopy(dyn.restriction)

    # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω –≤–∏–¥–∏–º–æ—Å—Ç–∏
    real_dyn.availability = deepcopy(dyn.availability)
    real_dyn.res_availability = deepcopy(dyn.res_availability)

    # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    protos_res = dict()  # —Å–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å —Å –µ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º –≤ —à–∞–±–ª–æ–Ω–µ

    for clst in dyn.ClustList.values():
        real_clst = real_dyn.AddClust(clst.Name)
        for res in clst.ResList.values():
            # new_id = uuid1()

            real_clst.AddRes(res.Name, res.MaxIntense, res.MaxThreads, res.price, res.ID)
            # protos_res[res.ID] = str(new_id)

    # real_proc = real_dyn.AddProc("–°–µ–∫—Ü–∏—è", uuid1())
    for proc in dyn.ProcList.values():

        real_proc = real_dyn.AddProc(proc.Name, proc.ID)
        # protos = dict() # —Å–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –µ—ë –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º –≤ —à–∞–±–ª–æ–Ω–µ

        for op in proc.OpList.values():
            # new_id = uuid1()
            real_op = real_proc.add_operation(op.Name, op.A, op.AP, op.ID)
            real_op.X = op.X
            real_op.XP = op.XP

            # protos[op.ID] = str(new_id)

            # –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏–º –Ω–æ–≤—ã–º–∏ —Å–≤—è–∑—è–º–∏
            for (clust, res) in dyn.res_iter():
                if (op.ID, res.ID) in dyn.ProductivityMatrix:
                    real_dyn.ProductivityMatrix[(op.ID, res.ID)] = dyn.ProductivityMatrix[(op.ID, res.ID)]

        # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
        real_proc.graph = proc.graph.copy()

    # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

    return real_dyn


def read_yaml(file_path):
    try:
        with open(file_path, "r") as f:
            try:
                return yaml.safe_load(f)
            except Exception:
                return
    except Exception:
        return

def get_variable(var_name, default):
    '''–ü–æ–∏—Å–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ -> –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è -> –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ -> –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'''
    var_arg = args_dict.get(var_name)
    if var_arg:
        var_arg = type(default)(var_arg)

    var_env = os.environ.get(var_name)
    if var_env:
        if var_env == 'True':
            var_env = True
        elif var_env == 'False':
            var_env = False
        else:
            var_env = type(default)(var_env)

    var_file = ya.get(var_name)
    if var_file:
        var_file = type(default)(var_file)

    var = var_arg if var_arg is not None else var_env if var_env is not None else var_file if var_file is not None else default
    color = "blue"
    #var = type(default)(var)
    if isinstance(var, bool):
        color = "green" if var == True else "red"
    click.secho('\t' + var_name.ljust(21, ' ') + '[{4}]\tcmd {0} ->\tenv {1} ->\tyaml {2} ->\tdefault {3}'.format(
        var_arg, var_env, var_file, default, var), fg=color, bold=True)
    return var

@click.command()
@click.argument('file', type=str, required=True)  # default=sys.stdin –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
@click.argument('args', nargs=-1)
def main(file, args):
    if not file:
        file = 'models/pavlov/test1.xml'
        file = 'test.xml'
        file = 'tests/basic.xml'
        file = 'tests/basic2.xml'   # –ó–ê–¶–ò–ö–õ–ò–í–ê–ù–ò–ï
        file = 'models/common/robo.bpmn'  # –ß—Ç–µ–Ω–∏–µ BPMN
        file = 'models/common/satellite.bpmn'  # –ß—Ç–µ–Ω–∏–µ BPMN
        file = 'models/monsg.bpmn'  # –ß—Ç–µ–Ω–∏–µ BPMN
        file = 'models/monsg-FINAL_gateway.bpmn'  # –ß—Ç–µ–Ω–∏–µ BPMN
        file = 'models/monsg-FINAL_gateway-ispr-final.bpmn'  # –ß—Ç–µ–Ω–∏–µ BPMN
        file = 'models/monsg-FINAL_gateway-ispr-final (2).bpmn'  # –ß—Ç–µ–Ω–∏–µ BPMN
        file = 'models/monsg-FINAL_gateway-ispr-final (2)-simple.bpmn'  # –ß—Ç–µ–Ω–∏–µ BPMN
        file = 'models/silos_uborka_simple.bpmn'  # –ß—Ç–µ–Ω–∏–µ BPMN
        # file = 'monsg-FINAL_gateway-ispr-final(3).bpmn'
        file = 'models/pavlov/mytry.bpmn'
    global args_dict
    args_dict = dict(zip(args[::2], args[1::2]))
    #print(args_dict)
    click.secho('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç: ', fg="yellow", bold=True)


    global DEBUG
    DEBUG = get_variable('DEBUG', True)
    global DEBUG_L1
    DEBUG_L1 = get_variable('DEBUG_L1', False)
    global DEBUG_L2
    DEBUG_L2 = get_variable('DEBUG_L2', False)
    global DEBUG_Q
    DEBUG_Q = get_variable('DEBUG_Q', True)
    global DEBUG_FRONT
    DEBUG_FRONT = get_variable('DEBUG_FRONT', False)
    global DEBUG_PULP
    DEBUG_PULP = get_variable('DEBUG_PULP', False)
    global DEBUG_INTERRUPT
    DEBUG_INTERRUPT = get_variable('DEBUG_INTERRUPT', False)
    global DEBUG_EXEC
    DEBUG_EXEC = get_variable('DEBUG_EXEC', False)
    global DEBUG_NORMALIZE
    DEBUG_NORMALIZE = get_variable('DEBUG_NORMALIZE', False)
    global DEBUG_GRAPH
    DEBUG_GRAPH = get_variable('DEBUG_GRAPH', False)
    global DEBUG_TRANS
    DEBUG_TRANS = get_variable('DEBUG_TRANS', True)
    global DEBUG_REV
    DEBUG_REV = get_variable('DEBUG_REV', False)
    global PRINT
    PRINT = get_variable('PRINT', False)
    global DEBUG_CTRL
    DEBUG_CTRL = get_variable('DEBUG_CTRL', True)

    global WRITE_FILE
    WRITE_FILE = get_variable('WRITE_FILE', False)

    global SIMPLE_DECISION
    SIMPLE_DECISION = get_variable('SIMPLE_DECISION', False)

    global NORMALIZE_LOG_OP
    NORMALIZE_LOG_OP = get_variable('NORMALIZE_LOG_OP', False)
    global NORMALIZE_LOG_ST
    NORMALIZE_LOG_ST = get_variable('NORMALIZE_LOG_ST', False)
    global NORMALIZE_LOG_ANGLE
    NORMALIZE_LOG_ANGLE = get_variable('NORMALIZE_LOG_ANGLE', True)

    global FILE_RESULT_GANT
    FILE_RESULT_GANT = get_variable('FILE_RESULT_GANT', True)
    global FILE_RESULT_LIST
    FILE_RESULT_LIST = get_variable('FILE_RESULT_LIST', False)
    global FILE_RESULT_CHART
    FILE_RESULT_CHART = get_variable('FILE_RESULT_CHART', False)

    global HAMILTONIAN_THINNING
    HAMILTONIAN_THINNING = get_variable('HAMILTONIAN_THINNING', 2)

    global PLOT_GANT
    PLOT_GANT = get_variable('PLOT_GANT', True)


    click.secho('–ú–æ–¥–µ–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ' + str(file), fg="yellow", bold=True)

    Dyn = GrandSolver('–®–∞–±–ª–æ–Ω')
    
    # —á–∏—Ç–∞–µ–º –º–æ–¥–µ–ª—å –≤—Å–µ–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    if file.lower().endswith('.xml'):
        dyn = Dyn.read_xml(file)
        real_dyn = fill_template(dyn, dyn.Threads or 1)    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–æ–Ω–æ–≤ –º–æ–¥–µ–ª–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!)
    elif file.lower().endswith('.bpmn'):
        dyn = Dyn.read_bpmn(file)
        real_dyn = fill_template(dyn, dyn.Threads or 1)    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–æ–Ω–æ–≤ –º–æ–¥–µ–ª–∏ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!)
        pass
    
    # real_dyn = dyn

    if DEBUG:
        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", len(real_dyn.ProcList))

    # PAVLOV: –∑–¥–µ—Å—å –º–µ–Ω—è—Ç—å –¥–æ–ø—É—Å–∫ –Ω–∞ —Ä–∞–∑—Ä—ã–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π (relaxed=True - —Å —Ä–∞–∑—Ä—ã–≤–∞–º–∏)
    real_dyn.calculate_plan(dict(method="PULP", relaxed=True))

    if DEBUG:
        print("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %s" % real_dyn.D)
        print("=" * 60)
        print('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')

    best_iteration = real_dyn.DetectAnyTime()
    real_dyn.BuildSchedule(best_iteration)

    if DEBUG_Q:
        print("–õ—É—á—à–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è:", best_iteration)
        for q, v in real_dyn.QltList.items():
            # if v[0] > 0:
            print(q, end=": ")
            for qx in v:
                print(qx, end=" ")
            print()

        for (proc, op) in sorted(real_dyn.Schedule,
                                 key=lambda proc_op: real_dyn.Schedule[(proc_op[0], proc_op[1])][0]['start'] if len(
                                     real_dyn.Schedule[(proc_op[0], proc_op[1])]) > 0 else -1):
            if len(real_dyn.Schedule[(proc, op)]):
                print(proc.Name, op.Name + " (" + str(real_dyn.OpPriorMatrix.get(op.ID, None)) + ")")
                for i in real_dyn.Schedule[(proc, op)]:
                    print("\t" + str(i['start']) + " -- " + str(i.get('stop')) + " : " + i.get('res', {
                        'Name': '--'}).Name + " @ " + str(i['intens']))


    if FILE_RESULT_GANT:
        print('–ó–∞–ø–∏—Å—å –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞')
        real_dyn.SaveGanttXML("result.xml")

    if FILE_RESULT_LIST:
        print('–ó–∞–ø–∏—Å—å —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π')
        real_dyn.SaveListXML("list.xml")

    if FILE_RESULT_CHART:
        print('–ó–∞–ø–∏—Å—å –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–µ—Å—É—Ä—Å–æ–≤')
        real_dyn.SaveChartXML("chart.xml")

    if PLOT_GANT:
        '''
        import plotly.figure_factory as ff

        df = [dict(Task="Job-1", Start='2017-01-01', Finish='2017-02-02', Resource='Complete'),
            dict(Task="Job-1", Start='2017-02-15', Finish='2017-03-15', Resource='Incomplete'),
            dict(Task="Job-2", Start='2017-01-17', Finish='2017-02-17', Resource='Not Started'),
            dict(Task="Job-2", Start='2017-01-17', Finish='2017-02-17', Resource='Complete'),
            dict(Task="Job-3", Start='2017-03-10', Finish='2017-03-20', Resource='Not Started'),
            dict(Task="Job-3", Start='2017-04-01', Finish='2017-04-20', Resource='Not Started'),
            dict(Task="Job-3", Start='2017-05-18', Finish='2017-06-18', Resource='Not Started'),
            dict(Task="Job-4", Start='2017-01-14', Finish='2017-03-14', Resource='Complete')]

        colors = {'Not Started': 'rgb(220, 0, 0)',
                'Incomplete': (1, 0.9, 0.16),
                'Complete': 'rgb(0, 255, 100)'}

        fig = ff.create_gantt(df, colors=colors, index_col='Resource', show_colorbar=True,
                            group_tasks=True)
        fig.show()

        #from pprint import pprint
        #pprint(real_dyn.Schedule)
        '''

        #import plotly
        import plotly.figure_factory as ff
        import plotly.express as px
        from datetime import datetime, timedelta
        import random
        from pandas import DataFrame

        import warnings
        warnings.filterwarnings('ignore', category=FutureWarning)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
        import json
        #from pprint import pprint
        #pprint(real_dyn.QltList)
        qlt = deepcopy(real_dyn.QltList)
        for k,v in list(qlt.items())[1:]:
            # –∑–∞–±–∏–≤–∞–µ–º –Ω—É–ª—è–º–∏ —Ç–æ, —á—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–ª–∏–Ω–µ
            #print(qlt)
            if len(v) != len(qlt['J0']):
                qlt[k] = [0 for _ in range(len(qlt['J0']))]
            # –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            if max(qlt[k][1:]) == 0:
                del qlt[k]
                continue
            #qlt[k] = qlt[k][1:]                     # –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
            max_i = max(qlt[k])
            if max_i > 0:
                qlt[k] = [v[0]] + [i/max_i for i in v[1:]]    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            

            # –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –Ω–µ–∑–Ω–∞—á–∏–º—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            #if not v[0]:
            #    del qlt[k]

        #print()

        del qlt['J0']
        #pprint(qlt)
        #qlt = json.dumps(qlt)

        # —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        from itertools import zip_longest

        head = '''
<!-- JQuery -->
<script src="gantt/js/jquery-3.5.1.js"></script>
<!-- Popper.js first, then Bootstrap JS -->
<script src="gantt/js/popper.min.js"></script>
<!-- Bootstrap 5 -->
<link href="gantt/css/bootstrap.min.css" rel="stylesheet">
<script src="gantt/js/bootstrap.bundle.min.js"></script>
<!-- Bootstrap 5 icons -->
<link rel="stylesheet" href="gantt/css/bootstrap-icons.css">

<!-- DataTables -->
<script src="gantt/js/jquery.dataTables.min.js"</script>
<script src="gantt/js/dataTables.bootstrap5.min.js"</script>
<link rel="stylesheet" type="text/css" href="gantt/css/bootstrap.min.css">
<link rel="stylesheet" type="text/css" href="gantt/css/dataTables.bootstrap5.min.css">
        '''
        
        head += '''<script type="text/javascript" class="init">$(document).ready(function () {
    var table = $('#example').DataTable({
    language: {
    
                    "processing": "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
                    "search": "–ü–æ–∏—Å–∫:",
                    "lengthMenu": "–ü–æ–∫–∞–∑–∞—Ç—å _MENU_ –∑–∞–ø–∏—Å–µ–π",
                    "info": "–ó–∞–ø–∏—Å–∏ —Å _START_ –¥–æ _END_ –∏–∑ _TOTAL_ –∑–∞–ø–∏—Å–µ–π",
                    "infoEmpty": "–ó–∞–ø–∏—Å–∏ —Å 0 –¥–æ 0 –∏–∑ 0 –∑–∞–ø–∏—Å–µ–π",
                    "infoFiltered": "(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏–∑ _MAX_ –∑–∞–ø–∏—Å–µ–π)",
                    "infoPostFix": "",
                    "loadingRecords": "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...",
                    "zeroRecords": "–ó–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                    "emptyTable": "–í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ",
                    "paginate": {
                        "first": "–ü–µ—Ä–≤–∞—è",
                        "previous": "–ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                        "next": "–°–ª–µ–¥—É—é—â–∞—è",
                        "last": "–ü–æ—Å–ª–µ–¥–Ω—è—è"
                    },
                    "aria": {
                        "sortAscending": ": –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é",
                        "sortDescending": ": –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"
                    },
                    "select": {
                        "rows": {
                            "_": "–í—ã–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: %d",
                            "0": "–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞",
                            "1": "–í—ã–±—Ä–∞–Ω–∞ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å"
                        }
                    }

    },
});

$('#example tbody').on('click', 'tr', function () {
    var data = table.row( this ).data();
    alert( 'You clicked on '+data[0]+' row' );
} );

});
</script>'''

        table = '<table id="example" class="table table-striped table-bordered table-hover" cellspacing="0" width="100%">'
        thead = '<thead><tr>'
        thead += '<th>' + 't' +'</th>'
        for j in real_dyn.QltList.keys():
            thead += '<th>' + j +'</th>'
        thead += '</tr></thead>'
        table += thead + '<tbody>'

        for i,lst in enumerate(zip_longest(*real_dyn.QltList.values(), fillvalue=0.0)):
            if not i:
                continue  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π)
            table += '<tr>'
            table += '<td>' + str(i) + '</td>'  # –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏
            for j in lst:
                table += '<td>' + str(j) + '</td>'
            table += '</tr>'
        
        table += '</tbody>'
        table += thead.replace('thead', 'tfoot')
        table += '</table>'

        # –ª–µ–ø–µ—Å—Ç–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        import plotly.graph_objects as go

        categories = [k + ' priority=' + str(v[0]) for k,v in list(qlt.items())]
        categories = [*categories, categories[0]]

        fig = go.Figure()
        for i in range(1, len(list(qlt.values())[0])):
            r = [v[i] for k,v in list(qlt.items())]
            fig.add_trace(go.Scatterpolar(
                r=[*r, r[0]],
                theta=categories,
                fill='toself',
                name='i='+ str(i)
            ))

        fig.update_layout(
        polar=dict(
            radialaxis=dict(
            visible=True,
            range=[0, 1]
            )),
        showlegend=True
        )

        #fig.show()
        



        # –æ—Ñ–ª–∞–π–Ω –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–≥–æ –≤ –æ–¥–∏–Ω html-—Ñ–∞–π–ª
        with open('p_graph.html', 'w', encoding="utf-8") as f:
            f.write('<html>')
            f.write(head)
            f.write('<body>')

            f.write('<div class="container-fluid">')
            f.write('  <div class="row">')
            f.write('    <div class="col-sm-4">')
            f.write(fig.to_html(full_html=False, include_plotlyjs=True))    # –ø–µ—Ä–≤—ã–π True, –æ—Å—Ç–∞–ª—å–Ω—ã–µ False
            f.write('    </div>')
            f.write('    <div class="col-sm-8">')
            f.write(table)
            f.write('    </div>')
            f.write('  </div>')


            f.write('<nav>')
            f.write('  <div class="nav nav-tabs" id="nav-tab" role="tablist">')
            for it,lst in enumerate(zip_longest(*real_dyn.QltList.values(), fillvalue=0.0)):
                if not it or it == 0:
                    continue
                is_or_not_active = 'active' if it == best_iteration else ''
                aria_selected = 'true' if it == best_iteration else 'false'
                f.write('    <button class="nav-link ' + is_or_not_active + '" id="nav-' + str(it) + '-tab" data-bs-toggle="tab" data-bs-target="#nav-' + str(it) + '" type="button" role="tab" aria-controls="nav-' + str(it) + '" aria-selected="' + aria_selected + '">' + str(it) + '</button>')
            f.write('  </div>')
            f.write('</nav>')

            f.write('<div class="tab-content" id="nav-tabContent">')

            for it,lst in enumerate(zip_longest(*real_dyn.QltList.values(), fillvalue=0.0)):
                if not it or it == 0:
                    continue
                if it != best_iteration: # –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ª—É—á—à—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
                    pass #continue
                real_dyn.BuildSchedule(it)   # it = iteration

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                #now = datetime.today().strftime('%Y-%m-%d %H:%M:') 
                now = datetime.min
                #now = datetime.today()
                # –ì–†–ê–§–ò–ö –ü–û –û–ü–ï–†–ê–¶–ò–Ø–ú - –í–´–î–ï–õ–ï–ù–ò–ï –¶–í–ï–¢–û–í –ü–û –†–ï–°–£–†–°–£
                df = []
                annots = [] # –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫ –≥—Ä–∞—Ñ–∏–∫–∞–º
                for ProcOp, IntResStartStop in real_dyn.Schedule.items():
                    proc, oper = ProcOp
                    task = str(oper.Name)
                    # —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (added by Palich)
                    if not IntResStartStop:
                        continue
                    start = (now + timedelta(0, IntResStartStop[0]['start'])).strftime('%Y-%m-%d %H:%M:%S')
                    finish = (now + timedelta(0, IntResStartStop[0]['stop'])).strftime('%Y-%m-%d %H:%M:%S')
                    resource = str(IntResStartStop[0]['res'].Name)
                    #intens = IntResStartStop[0]['intens']
                    opprior = '%.2E' % real_dyn.OpPriorMatrix[ProcOp[1].ID]
                    # –ü–û–ù–Ø–¢–¨ –û–¢–ö–£–î–ê –ë–ï–†–£–¢–°–Ø –ü–†–ò–û–†–ò–¢–ï–¢–´
                    opprior = '%.2E' % real_dyn.Priorities_all[ProcOp[1].ID] if ProcOp[1].ID in real_dyn.Priorities_all else 0
                    #print(dict(Task=task, Start=now+start, Finish=now+finish, Resource=resource))
                    #df.append(dict(Task=task, Start=start, Finish=finish, Resource=resource, Intens = intens))
                    df.append(dict(Task=task, Start=start, Finish=finish, Resource=resource, Opprior = opprior))

                df.sort(key=lambda x: x["Task"], reverse=True)

                ######
                r = lambda: random.randint(0,255)
                col = (r(),r(),r())
                r_col = (255 - col[0], 255 - col[1], 255 - col[2])
                colors = ['#%02X%02X%02X' % col]        # —Ü–≤–µ—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
                r_colors = ['#%02X%02X%02X' % r_col]    # —Ä–µ–≤–µ—Ä—Å–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö
                set_res = list(set([i['Resource'] for i in df]))
                for i in range(1, len(set_res) + 1):
                    col = (r(),r(),r())
                    r_col = (255 - col[0], 255 - col[1], 255 - col[2])
                    colors.append('#%02X%02X%02X' % col)
                    r_colors.append('#%02X%02X%02X' % r_col)
                #####
                title1 = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º'
                fig1 = ff.create_gantt(df, title=title1, colors=colors, index_col='Resource', show_colorbar=True,
                                    group_tasks=False, showgrid_x=True, showgrid_y=True)
                fig1.update_layout(overwrite=True, legend_traceorder="grouped")
                #  –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è  –ø—Ä–∏ —è–≤–Ω–æ–º —É–∫–∞–∑–∞–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
                max_x = max([i['Finish']for i in df])
                min_x = min([i['Start']for i in df])
                fig1.update_layout(xaxis_range=[min_x, max_x])
                fig1.update_layout(legend=dict(yanchor="top", y=0.9, xanchor="left", x=0.9))

                # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∞–Ω–Ω—Ç–æ—Ç–∞—Ü–∏—è –∫ —Å—Ç–æ–ª–±–∏–∫–∞–º
                from dateutil.parser import parse
                for i in range(len(df)):
                    # –í—ã—á–∏—Å–ª—è–µ–º –∫—É–¥–∞ —à–ª–µ–ø–∞—Ç—å –Ω–∞–¥–ø–∏—Å—å
                    a = parse(df[i]['Start'])
                    b = parse(df[i]['Finish'])
                    LabelDate = a + (b - a)/2
                    #text = df[i]['Task']
                    text = df[i]['Opprior']
                    annots.append(dict(x=LabelDate,y=i,text=text, showarrow=False, font=dict(color=r_colors[set_res.index(df[i]['Resource'])])))

                # plot figure
                fig1['layout']['annotations'] = annots

                # —Ä–∏—Å—É–µ–º –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π (–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞)
                fig1.add_vline(x=(now + timedelta(0, 0)).strftime('%Y-%m-%d %H:%M:%S'), line_dash="dash", line_color="green")
                for aval in real_dyn.availability.values():
                    for x in aval:
                        fig1.add_vline(x=(now + timedelta(0, x[0])).strftime('%Y-%m-%d %H:%M:%S'), line_dash="dash", line_color="green")
                fig1.update_layout()


                # –ì–†–ê–§–ò–ö –ü–û –†–ï–°–£–†–°–ê–ú - –í–´–î–ï–õ–ï–ù–ò–ï –¶–í–ï–¢–û–í –ü–û –û–ü–ï–†–ê–¶–ò–ò
                df = []
                for ProcOp, IntResStartStop in real_dyn.Schedule.items():
                    proc, oper = ProcOp
                    task = str(oper.Name)
                    # —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (added by Palich)
                    if not IntResStartStop:
                        continue
                    start = (now + timedelta(0, IntResStartStop[0]['start'])).strftime('%Y-%m-%d %H:%M:%S').zfill(19)
                    finish = (now + timedelta(0, IntResStartStop[0]['stop'])).strftime('%Y-%m-%d %H:%M:%S').zfill(19)
                    resource = str(IntResStartStop[0]['res'].Name)
                    #print(dict(Task=task, Start=now+start, Finish=now+finish, Resource=resource))
                    df.append(dict(Task=resource, Start=start, Finish=finish, Resource=task))

                df.sort(key=lambda x: x["Task"], reverse=False)

                ######
                r = lambda: random.randint(0,255)
                colors = ['#%02X%02X%02X' % (r(),r(),r())]
                for i in range(1, len(set([i['Resource'] for i in df])) + 1):
                    colors.append('#%02X%02X%02X' % (r(),r(),r()))
                #####
                title2 = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º'
                fig2 = ff.create_gantt(df, title=title2, colors=colors, index_col='Resource', show_colorbar=True,
                                    group_tasks=True, showgrid_x=True, showgrid_y=True)
                fig2.update_layout(overwrite=True, legend_traceorder="grouped")
                #  –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è  –ø—Ä–∏ —è–≤–Ω–æ–º —É–∫–∞–∑–∞–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏
                max_x2 = max([i['Finish']for i in df])
                min_x2 = min([i['Start']for i in df])
                fig2.update_layout(xaxis_range=[min_x2, max_x2])
                fig2.update_layout(legend=dict(yanchor="top", y=0.9, xanchor="left", x=0.9))


                '''from plotly.subplots import make_subplots
                fig12 = make_subplots(rows=2, cols=1, shared_xaxes=True)
                fig12.append_trace(fig1._data_objs, row=1, col=1)
                fig12.append_trace(fig2._data_objs, row=2, col=1)
                fig12.update_layout(height=600, width=600, title_text="Stacked Subplots")
                fig12.show()'''

                #fig1.show() #–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∫–∞–∑ –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç) - –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

                ## –æ—Ñ–ª–∞–π–Ω –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ - —Å—Ç–∞–±–∏–ª—å–Ω—ã–≤–π –≤–∞—Ä–∏–∞–Ω—Ç
                ## —Ç—Ä–µ–±—É–µ—Ç—Å—è gantt.html + –ø–∞–ø–∞–∫–∞ js
                #import json
                #graphJSON1 = json.dumps(fig1, cls=plotly.utils.PlotlyJSONEncoder)
                #with open('gantt/gantt_1.JSON', 'w') as file:
                #    file.write('var graphs = {};'.format(graphJSON1))

                #graphJSON2 = json.dumps(fig1, cls=plotly.utils.PlotlyJSONEncoder)
                #with open('gantt/gantt_2.JSON', 'w') as file:
                #    file.write('var graphs = {};'.format(graphJSON2))

                is_or_not_active = 'show active' if it == best_iteration else ''
                aria_selected = 'true' if it == best_iteration else 'false'
                f.write('<div class="tab-pane fade ' + is_or_not_active + '" id="nav-' + str(it) + '" role="tabpanel" aria-labelledby="nav-' + str(it) + '-tab" tabindex="0">')



                f.write('  <div class="row">')
                f.write('    <div class="col-sm">')
                f.write(fig1.to_html(full_html=False, include_plotlyjs=False))
                f.write('    </div>')
                f.write('  </div>')
                f.write('  <div class="row">')
                f.write('    <div class="col-sm">')
                f.write(fig2.to_html(full_html=False, include_plotlyjs=False))
                f.write('    </div>')
                f.write('  </div>')
                #f.write('</div>')


                f.write('</div>')

            #f.write('</div>')
            f.write('</div>')
                
            f.write('</body>')
            f.write('</html>')
        
        #import os
        #os.system("start p_graph.html")

if __name__ == '__main__':
    ya = read_yaml("env.yaml")
    main()